{"pages":[{"title":"","text":"关于 .last_update{float:none}","link":"/about/index.html"},{"title":"","text":"啊哦，你想访问的页面似乎不存在呢。 404! 请点击按钮返回主页🏠 .animate__animated.animate__rubberBand{ font-size: 5em !important; text-align: center; margin-right: -39rem !important; margin-top: -3rem !important; margin-bottom: -25px !important; } .level-left{ display: none !important; } p { text-align: center; } .hero.is-danger{ border-radius: 25px; } .subtitle{ margin-top: -1.86em !important; } .title.is-3{ display: none; } .button.is-danger.is-light{ margin-top: -3px; margin-left: 10px; }","link":"/404.html"}],"posts":[{"title":"种草 Trilium 了……","text":"我去，Trilium 也太赞了吧，折腾了这么久，这应该是我梦想中的知识管理软件，在少数派看了 idelem 大佬写的几篇文章，准备开始慢慢学习迁移了。","link":"/post/awesome_trilium/"},{"title":"基于腾讯云，给你的 Icarus 博客配上 Twikoo 评论系统","text":"拖更是不好的。异次元de机智君 📚本系列文章，将分成四个板块更新 基础设计修改 配置 Twikoo 评论 增加深色模式支持 其他细节与模块 .message-header { justify-content: start !important; } .message.is-info{ width: 50%; float: right; margin-left: 20px; margin-bottom: 11px !important; } @media screen and (max-width: 768px){ .message.is-info{ width: 100%; float: none; margin-left: 0; } } 太长的文章也是不好的，比如我之前有一篇 Windows 软件推荐文，因为内容太多，已经写了一个多月了，现在看到它就有些恶心（不过肯定会完成的）。所以这篇我会尝试加快脚步去介绍，毕竟 Twikoo 的中文文档目前也比较详细了，其实没什么可写的了，大佬们可以自己参考。 闲话少说，这篇是 Candy 主题系列的第二篇，每个博客都需要的、食之无味弃之可惜的评论系统。当然 Candy 主题基于 Icarus 主题，所以对 Icarus 主题来说也是完全适用的。 为什么选择 Twikoo？ 其实 iMaeGoo 大佬在官方文档就把理由说的非常清楚了： 一个简洁、安全、免费的静态网站评论系统，基于腾讯云开发。 「简洁」、「安全」、「免费」、基于国内的云服务，对于一个主体语言是中文的博客来说，还需要更多理由吗？目前的评论系统现状是：「简洁」的，不够安全；「安全」的不一定免费；「免费」的不一定在国内网络环境能很好的访问。 Twikoo 的特性 作为一款「纯国产」的评论系统，Twikoo 很多特性对于国内博主真的很方便： 采用免费的腾讯云开发，免去二次备案的时间成本； 通过云函数控制敏感信息，防止泄漏； 微信、QQ、邮件…… 多种提醒方式可选； 基于 Akismet 的反垃圾支持； 方便好用的评论管理系统和配置台，直接在博客评论区管理评论和配置其他信息； 博主标示、User Agent 显示、点赞系统、多级评论、支持图片、markdown、Katex 公式……； 活跃、友善的开发者和社区； 除此之外，你还需要明白 Twikoo 是个正在成长中的评论系统，且更新频繁，你可以在这里浏览开发计划。另外，它已被腾讯云官方选为云开发优秀应用。 让我们开始吧！ 搭建 Twikoo 分两步： 在本地的博客主题中配置 Twikoo； 在腾讯云配置环境和云函数； 在此感谢作者 iMaeGoo ，本教程基于它的魔改版 Icarus，且适用于 Icarus 4.1.1。 在本地的博客主题中配置 Twikoo 第一步： 在主题目录下 layout/comment 中创建 twikoo.jsx 并键入： twikoo.jsxconst { Component, Fragment } = require('inferno'); const { cacheComponent } = require('hexo-component-inferno/lib/util/cache'); class Twikoo extends Component { render() { const { envId, jsUrl, } = this.props; const js = `twikoo.init({ envId: '${envId}' });`; return ( &lt;Fragment&gt; &lt;div id=&quot;twikoo&quot; class=&quot;content twikoo&quot;&gt;&lt;/div&gt; &lt;script src={jsUrl}&gt;&lt;/script&gt; &lt;script dangerouslySetInnerHTML={{ __html: js }}&gt;&lt;/script&gt; &lt;/Fragment&gt; ); } } Twikoo.Cacheable = cacheComponent(Twikoo, 'comment.twikoo', (props) =&gt; { const { comment } = props; return { envId: comment.envId, jsUrl: 'https://cdn.jsdelivr.net/npm/twikoo/dist/twikoo.all.min.js', }; }); module.exports = Twikoo; 第二步： 在 include/shema/comment 中创建 twikoo.json ，并键入： twikoo.json{ &quot;$schema&quot;: &quot;http://json-schema.org/draft-07/schema#&quot;, &quot;$id&quot;: &quot;/comment/twikoo.json&quot;, &quot;description&quot;: &quot;Twikoo comment plugin configurations&quot;, &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;type&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;const&quot;: &quot;twikoo&quot; }, &quot;envId&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;envId from Tencent CloudBase&quot; } }, &quot;required&quot;: [&quot;type&quot;, &quot;envId&quot;] } 第三步： 在 include/schema/common/comment.json 中添加 twikoo.json 的 $ref： comment.json }, { &quot;$ref&quot;: &quot;/comment/valine.json&quot; + }, + { + &quot;$ref&quot;: &quot;/comment/twikoo.json&quot; } ] } 第四步： 现在你只需要在 _config.yml 文件中 comment 部分添加 Twikoo 即可，在 envId 后面请填写你自己的腾讯云环境 ID，这个 ID 你会在下一个板块了解如何获取，现在可以空着： comment: type: twikoo envId: xxxxxxxxxxxxxxx # 腾讯云环境id jsUrl: https://cdn.jsdelivr.net/npm/twikoo@0.4.5/dist/twikoo.all.min.js 这里需要注意的是最后的 jsUrl ，你会发现 twikoo 后面有 @ 版本号。保险起见，目前 twikoo 是需要你手动去更新这个版本号的。如果你不加版本号，这意味着每次都请求最新版本，你可能就必须得及时更新后台云函数了。 同样，更新版本也很简单，后台更新云函数后，这里该版本号即可。 第五步（可选）： 给博客换上 Twikoo 访客计数。在 layout/common/article.jsx 中修改 {/* Visitor counter */} 部分： article.jsx+ {!index ? &lt;span id={url_for(page.link || page.path)} class=&quot;level-item twikoo_visitors&quot; data-flag-title={page.title} dangerouslySetInnerHTML={{ - {!index &amp;&amp; plugins &amp;&amp; plugins.busuanzi === true ? &lt;span class=&quot;level-item&quot; id=&quot;busuanzi_container_page_pv&quot; dangerouslySetInnerHTML={{ __html: _p('plugin.visit_count', '&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;0&lt;/span&gt;') + __html: '&lt;i class=&quot;far fa-eye&quot;&gt;&lt;/i&gt;' + _p('plugin.visit_count', '&amp;nbsp;&amp;nbsp;&lt;span id=&quot;twikoo_visitors&quot;&gt;&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&lt;/span&gt;') }}&gt;&lt;/span&gt; : null} 本地需要修改的部分完成✅ 在腾讯云配置环境和云函数 云环境初始化 我们先来初始化腾讯云环境，使用云开发作为评论后台，每个云开发用户均长期享受 1 个免费的标准型基础版 1 资源套餐，换句话说对于大部分博主来说是免费的。 注册云开发CloudBase 进入云开发控制台，新建环境，请按需配置环境： 环境名称自由填写 推荐选择计费方式包年包月，套餐版本基础班 1，超出免费额度不会收费 如果提示选择“应用模板”，请选择“空模板” 进入环境-登录授权，启用“匿名登录”； 进入环境-安全配置，将网站域名添加到“WEB安全域名”； 复制环境 ID，在上一板块中的第四步填写。 配置云函数 接下来配置云函数。恭喜你赶上了 Twikoo 的好时代，目前支持的配置方式很多，且更简单，不需要再去踩脚本安装的坑了。 不是我偷懒，这部分官方文档其实说的非常完善且精简了，我觉得再转述一遍也没什么意思，希望大家能直接阅读官方文档的手把手教程。 Fallback link for browsers that don't support iframes 这里是嵌入式网页，支持直接在这里滑动阅读 在这里只有一个建议，尽量采用「① 网页方式」，不要用脚本方式！不要用脚本方式！不要用脚本方式！尤其是在 macOS 下，「授权云开发环境」这步会有些 bug。 成功了🎉！你给自己的 Icarus 博客换上了崭崭新的 Twkoo 评论，接下来看看如何管理和配置。 配置、管理你的 Twikoo 评论系统 我们来开启管理面板： 进入环境-登录授权，点击“自定义登录”右边的“私钥下载”，下载私钥文件 用文本编辑器打开私钥文件，复制全部内容 你只需要来到最下面的评论区，点击小齿轮 即可配置更多设置，当然博主是需要登录的，初次进入需要粘贴私钥文件内容，并设置管理员密码。 至于，通知提醒一类的功能，在控制面板中也有相应的引导，我就不在这里废话了。有什么问题欢迎和我交流或查看官方解答。 就这样，结束～ .content {text-align: left !important;} 原创封面图，使用需授权，请勿盗用","link":"/post/icarus_to_candy_2/"},{"title":"一日一技？「扩展」并重新认识 macOS 控制中心","text":"本文首发于少数派 👉 一日一技？「扩展」并重新认识 macOS 控制中心 嗨，我是异次元de机智君，又见面了。 今天要介绍的是 macOS Big Sur 中新加入的控制中心。 对于它的基础用法，少数派编辑部已经在第一时间 介绍过了，我只挑没提到的来说说。 本文你将看到： 控制中心的「扩展」 关于控制中心的更多细节 通过键盘快捷键启动控制中心 我对控制中心的理解 为什么「一日一技」后要跟问号？因为可能太过简单了，算不上「技」。 那为什么我还要写？因为我发现作为一个新特性似乎没有人在谈论。（还是因为太过简单了吧……） 万一有人需要但还不知道呢？总而言之，一起来看看吧。 真没想到，控制中心还能「扩展」？ 这是我翻「 系统偏好设置」的时候无意间看到的…… 打开「系统偏好设置」-「程序坞与菜单栏」，找到「其他模块」，现在你可以把「辅助功能快捷键」、「电池」、「快速用户切换」也一并加在控制中心里了。 我们来把它们都打开，看看效果。 左：原版，右：「扩展」后 现在你可以直接在菜单栏右上角的控制中心中访问电池电量信息、辅助功能和切换用户了。这三个新增按钮与其它组件的选单逻辑保持一致。 更多细节，别忘了它的二级选单 少数派上的所有相关文章都只是在强调你可以将图标拖拽到菜单栏使用，忽略了一个也很重要的二级选单支持，简单来说它才是真正实现「控制」这一词的核心，否则控制中心只是一个展示窗口。 如果我们把图标都从控制中心拖到菜单栏，那我们还要控制中心干嘛？不如叫它「收纳中心」了。当然，我并不是在试图强行扭转你长久以来的使用逻辑，但我们至少可以对这个新特性更加了解，再做出选择。 苹果在控制中心里确确实实地做了二级选单，这意味着你可以点击其中一个图标进行更多的设置。这个选单是和原有的菜单栏图标选单内容一致的，但很细节的是你可以通过再次点击控制中心图标或点击功能标题返回一级选单，在这个过程中你可以看到缩放动画——这说明在控制中心的交互逻辑里，是把这些控制按钮当作装在一大盒子里一个个小盒子来看待的，它们之间是有层级和包含关系的。 动效体现了控制中心的逻辑，你可以点击一次选单操作多个设置 这个交互逻辑事实上大部分时候会让用户多一次点击操作，我相信这也是为什么很多老用户不会去用它的原因，但你得到了一个更可能简洁的菜单栏，且合理的分块让一些设置更直观更好找，是空间换时间。而且在一些需要调整多个设置的场景下，比如同时滑动调整音量和切歌，控制中心所需要的点击数是比传统菜单栏要少的。 来给控制中心加个键盘快捷键 遗憾的是，目前官方并不支持任何键盘快捷键操作控制中心，这对于桌面端难免有些不友好，但是别担心，机智君也帮你准备了 AppleScript +「自动操作」的教程和之前 介绍过 的 Keysmith 宏指令来部分解决这一尴尬。 AppleScript +「自动操作」 第一步： 打开系统自带的「自动操作」，并创建「快速操作」。 **第二步： ** 在左侧搜索 AppleScript 并将「运行 AppleScript」拖动到右侧，在窗体中键入： tell application &quot;System Events&quot; tell process &quot;ControlCenter&quot; tell menu bar item &quot;控制中心&quot; of menu bar 1 click end tell end tell end tell 并保存，记得取一个自己记得住的名字，比如「打开控制中心」。 ⌘ Cmd + S 快捷保存 第三步： 打开系统偏好设置-键盘，选择「快捷键」标签，点击左侧的「服务」。在「通用」中找到你刚刚命名的快速操作，并点击右侧「无」来录制键盘快捷键。 此法的局限 这个方法也有局限，还挺恶心的——你必须在「隐私」-「辅助功能」设置中把你希望此快捷键生效的应用都勾选，否则会报错： 这也太麻烦了！当然，既然是基于 AppleScript 你完全可以通过其它自动化应用来激活，这样就不会有这种问题了，比如 BetterTouchTool 等。 Keysmith 宏指令 你也可以选择我此前介绍的 Keysmith，你可以在 这里 获得详细介绍。我就不多说明制作过程了，需要的朋友可以直接点击 链接 获取我制作的一些基于 Keysmith 的控制中心自动指令，直接导入 Keysmith 使用。 不过目前来看，任何方法都有一个问题：控制中心本身不支持键盘操作，我们不能在通过快捷键打开控制中心后继续用键盘选中、确认组件或返回一级选单等。 相信苹果会解决的。 我到底为什么介绍控制中心 好吧，我承认这未免有些「标题党」。毕竟这些内容远远达不到「扩展」的程度，但我还是想好好说说我为什么写它。 它缘何诞生? 事先说好，理论上来说 macOS 和 iOS 不会融合，Mac 也暂时不会支持触屏，对于这一点有疑问的可以从很多方面获知这一信息：比如 2018 年的 WWDC、iPadOS 命名的诞生、CNET News 对 Craig Federighi 的 采访 等。 那为什么苹果会选择在 macOS 新版本拥抱 iOS/iPadOS 的视觉和部分交互呢？ 我想更多是出于品牌辨识度和学习成本的考虑——对于一个完全不了解苹果产品线的潜在用户来说，看到 iPadOS 和 macOS 的程序坞，大概心里就会觉得它们出自一家之手。而这在某种程度上也可以帮助 iPhone 和 iPad 用户更平滑地接受 macOS，缓解他们先入为主的畏难心理。 控制中心？哦，和 iOS/iPadOS 上的一样，用来快捷控制系统设置的，都是通过右上角调出，那我会了。 程序坞？哦，和 iPadOS 上长的一样，可以拖动来放置软件，点一下就能启动了。 其次便是为了打通多个平台做准备。这点不用我多说，看看 ARM Mac 的势头，明眼人都能获悉了。不过具体打通方式可能需要一篇长文分析，我在此就不发表拙见了。 当然部分老用户们可能并不喜欢，他们对新系统的要求可能是「保持我的使用习惯」和「更多新特性」，但遗憾的是这两者有时会有些矛盾。说服或淘汰还是妥协老用户，这些我说了不算，而是苹果应该抉择的。 至少在 macOS Big Sur 上可以「菜单栏」、「控制中心」双添加，苹果选择了妥协。不过以后呢？提前意识到这一趋势，让我们对自己的设备使用和选择更有掌控力。 有对比就有伤害，更强的第三方解决方案 本文其实是我拿官方的控制中心「抛砖引玉」一下，相信很多 Power User 对于控制中心的不满来自于它超低可自定义性。在这一方面，第三方解决方案就自由的多，为了防止偏题，就不在本文详细展开了。我将会在近期介绍这个基于 BetterTouchTool 的第三方控制中心预设，名为 MCC。感兴趣的朋友可以点击链接提前了解，或关注我之后的介绍文。 扩展阅读（并不代表本人赞成）： Here’s Why Control Center Is MacOS Big Sur’s Best Feature | Digital Trends","link":"/post/macOS_control_center/"},{"title":"海贼王原作 1000 话纪念！","text":"路飞再次说出梦想，真是值得纪念的时刻! 废话少说，直接放出漫画最后一页，激动啊！","link":"/post/one_piece_1000/"},{"title":"创造 CANDY 主题，只为更好的交互","text":"📚本系列文章，将分成四个板块更新 基础设计修改 配置 Twikoo 评论 增加深色模式支持 其他细节与模块 .message-header { justify-content: start !important; } .message.is-info{ width: 50%; float: right; margin-left: 20px; margin-bottom: 11px !important; } @media screen and (max-width: 768px){ .message.is-info{ width: 100%; float: none; margin-left: 0; } } 众所周知，Icarus[1] 是一个非常优秀的 Hexo 主题。它不仅提供清爽、简洁的界面，还与各种主流插件、组件兼容的很好。更令人欣喜的是——它几乎是最活跃的 Hexo 主题之一，有着非常良好的社区氛围。作者时刻保持更新，并提供了非常完善的文档。 种种因素使我最终选择了它，并准备在其基础上修改出自己满意的设计，我将其命名为 Candy，并将在 GitHub 上与 Icarus 保持更新。本文将是这一系列文章的第一节——基础设计修改。 本人前端零基础，如有不妥，请在评论区教我做事，谢谢🙏 真正的卡片式设计——让最频繁的交互更人性化 分析 Icarus 主题很美观，但对我来说它与许多 Hexo 主题一样都存在一个核心问题，即首页的文章如需访问全文，需要点击 Read More 按钮、图片或标题才可以进入，而点击主文字或卡片空白处是没有反应的，恰好很多博主喜欢把摘要写成长篇大论，此时的 Read More 按钮看起来更小，很容易被忽视，点击大段文字也许是很多读者的第一反应，虽然这并不会得到任何回应。 点击、进入全文，这应该是每个博客最频繁的交互。尴尬的小按钮难免给读者造成一些细微的障碍，当然如果对自己的内容足够自信，或者没那么讲究的话，你就可以跳过这一节了。 尝试 为了达成真正的卡片效果，我探索过一些方法。 我的第一反应是在 &lt;article&gt; 标签外套一层 &lt;a&gt; 标签然后设置 href 属性，同时 &lt;article&gt; 要设置成块级元素。于是我便在 layout/common/article.jsx 中这样修改： layout/common/article.jsx&lt;a class=&quot;card-link&quot; href={index ? url_for(page.link || page.path):null}&gt; &lt;article class={`card-content article${'direction' in page ? ' ' + page.direction : ''}`} role=&quot;article&quot;&gt; ... &lt;/article&gt; &lt;/a&gt; 感觉非常合理，但其实并不行，如果这样操作，在实际页面中，&lt;a&gt; 标签并不会正确包裹，反而会被添加到 &lt;article&gt; 元素下每个子元素的首位。我并不确定是什么原因，但是根据 Stack Overflow 上的一篇回答中的评论： You should really point out (by suggesting this way) that: using this solution you cannot have other Anchor elements inside the article.Roko C. Buljan Jul 14 '16 at 6:51 貌似如果想这样操作的话，子元素不能再有其他 &lt;a&gt; 元素。我便以为是不可以的，当时就作罢了。 接下来，我尝试在外面先套一层 &lt;object&gt; 标签，再套 &lt;a&gt; 标签链接到正文，这样我们就实现了整张卡片可点击的效果。 layout/common/article.jsx&lt;a class=&quot;card-link&quot; href={index ? url_for(page.link || page.path) : null}&gt; &lt;object class=&quot;card-object&quot;&gt; &lt;article class={`card-content article${'direction' in page ? ' ' + page.direction : ''}`} role=&quot;article&quot;&gt; ... &lt;/article&gt; &lt;/object&gt; &lt;/a&gt; 这样确实可以了，本来这一段到这里就结束了，但我想起了文档里对 &lt;object&gt; 标签的描述： HTML &lt;object&gt; 元素（或者称作 HTML 嵌入对象元素）表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。MDN 啊这，有一丝隐隐的不安。迅速查了下 SEO，发现目前 Google 是会索引 object 元素的，但心里就是不舒服，毕竟不太符合语义。 于是乎，就换来了接下来的方法，也是最终的实现方法。 解法 这种方法的思路其实和第一种是一致的，但是具体实现有区别，这次我们不在 article.jsx 里修改了，直接在 source/js/main.js 最底下添加： if ($('.article-licensing.box').length === 0){ $(&quot;.card-content.article&quot;).each(function(){ $(this).wrap('&lt;a class=&quot;card-link&quot; href=&quot;' + $(this).find('h1 a').attr('href') + '&quot;&gt;&lt;/a&gt;'); })} 其实就是用了 jQuery 的 warp() 方法[2]，这里我们指定 &lt;a&gt; 元素来包裹 &lt;article&gt; 元素。同时因为我们只需要在首页让这些卡片有链接，所以我们可以通过判断正文末尾的版权信息盒子是否存在，来控制这条语句是否生效。 我们还需要设置一下 card-link 的 color 为 inherit，这样摘要的颜色就会恢复成白色，否则会是你 a 标签的颜色（自定义 CSS 的方法在后文）： .card-link color: inherit 这样我们就实现了整个卡片可点击，且卡片里原有的分类链接照样可以点击并不受影响。但我并不知道为何第一种和第三种方法会有这样的差异，如果有大佬清楚请在评论区解答我，谢谢。 加入一点动效会让体验更好吗？答案是肯定的 所谓「交互」，代表着交流和互动。一个好的交互设计，组件与用户的互动是必不可少的。互联网厂商们早已发现了这一逻辑，并将这些互动悄悄藏在设计里，通过微小的震动、令人愉悦的变换俘获用户的感官。 简单来说，光将整张卡片链接到正文还不够，它得是让用户有感知的，这个感知就由动效来实现。 废话少说，先上效果图👇： 为实现这个效果，我增加了： 向上的位移 阴影的变换 题图的变大（深色模式下，还增加了题图的变暗） 我希望能用纯 CSS 解决的，尽量只用 CSS。为了后期与 Icarus 同步更方便，我们修改 source/css 目录下的 style.styl 来自定义样式。Icarus 使用 Stylus[3] 作为 CSS 预处理器。它的定义生效规则是： 一个变量不能影响在定义它以前的输出样式。[4] 所以为了方便，我们可以把所有自定义样式放在最前面，把 @import 放在最后。 位移与阴影 首先，我们将位移与阴影一起添加，效果模仿自 Gridsome Blog Starter 🙏。 因为我不希望在正文处也出现动效，同时希望尽可能用纯 CSS 解决，所以我在 article.jsx 最前面添加一个只在正文生效的空的 div 元素，并通过 class 名「controller」来控制： article.jsxreturn &lt;Fragment&gt; // 通过判断 index 是否存在，来决定是否是正文。 {!index ? &lt;div class={'controller'}&gt;&lt;/div&gt;: null} ... &lt;/Fragment&gt; 这样一来，正文的最前面就会多一个空的、class 名为「controller」的 div 元素。接下来我们写伪类： .order-2 .card:hover transform: translateY(-5px) box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1) -webkit-transform: translateY(-5px) -webkit-box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1) // 将兄弟元素为 .controller 的 .card 的 :hover 样式重制（无效化） .order-2 .controller ~ .card:hover transform: none box-shadow: 0 4px 10px rgba(0,0,0,0.05), 0 0 1px rgba(0,0,0,0.1) -webkit-transform: none -webkit-box-shadow: 0 4px 10px rgba(0,0,0,0.05), 0 0 1px rgba(0,0,0,0.1) // 加入过渡效果 .card transition: opacity 0.3s ease-out, transform 0.3s ease-out, box-shadow 0.6s !important 可以看出来，这样写会有一些啰嗦和冗余，我尝试过一些想法都不太好，比如将 index 判断反写，把「controller」加在首页最上方，但 Icarus 原版的 &lt;Fragment&gt; 元素写法，会在每个卡片上加上一个 div 元素，从而打乱布局，让菜菜的我觉得麻烦，所以先就这样，日后再改。 如果有大佬们有更好的解决方案，请在评论区赐教。 点击展开查看：一个现在不兼容，但未来可能可以的做法。 菜菜的我本来很辛苦的摸索了出来这种写法，结果发现目前只有 Safari 和最新版本的 Firefox 可以比较好的支持，这取决于浏览器对 CSS Selector Level 4 的支持程度（Safari 91% 支持，而 Chrome 只有 88%，这个特性恰好在这不支持的 3% 里）。 简单来说就是 :not 里嵌套兄弟选192择器 ~： .order-2 &gt; :not(.controller ~ .card):hover transform: translateY(-5px) box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1) -webkit-transform: translateY(-5px) -webkit-box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1) 很好理解，这个选择器会选择兄弟不为 .controller 的 .card，这样只需要这一个语句即可。 关于这一特性的详细可以看 W3C Editor’s Draft 和 CSS4 Selectors，另附 Can I use 兼容情况。 题图 最后我们添加题图放大的动效，这里的效果模仿自 Apple 官网的 Newsroom 📰，注意 :hover 的写法，我希望鼠标放在卡片上时就激活（而不仅仅是放在题图上）： style.styl.card:hover .card-image a -webkit-transform: scale(1.03) transform: scale(1.03) // 加入过渡效果 .card .card-image a -webkit-transition: opacity 1s cubic-bezier(0.4, 0, 0.25, 1), -webkit-transform 400ms cubic-bezier(0.4, 0, 0.25, 1),200ms -webkit-filter linear transition: opacity 1s cubic-bezier(0.4, 0, 0.25, 1), transform 400ms cubic-bezier(0.4, 0, 0.25, 1),200ms filter linear 细心的朋友可能会发现，光这样还不完美——图片在变换的过程中会先取消圆角，再恢复圆角，也就是说中间会有一段时间「四角方方」，这是我们不愿意看到的，解决方法也很简单，再添加一个 0 度的旋转[5]即可： // 修复变换时的圆角 .card-image transform: rotate(0deg) -webkit-transform: rotate(0deg) 在黑暗模式下我还加入了题图变暗的效果。关于黑暗模式我会在之后详解，就不在本文中赘述了： -webkit-filter: brightness(70%) filter:brightness(70%) 至此，我们便完成了一个用户友好的卡片设计，它整张卡片可点击，且有合适的动效互动，但这并不是 Candy 主题的全部，还有很多细节性的动效就不在这里赘述了，感兴趣的话可以去查看 style.styl 源码。 「跟着走」的导航栏，贴心而不恼人 最后，我想我需要一个会跟随页面的导航栏，它得是贴心的——当你需要它的时候，比如回首页、切换浅色/深色模式、搜索，它就在那里；它还得是不恼人的——它不应该遮挡太多，影响到正文或视觉平衡，它得是灵巧的，且更好的适配响应式设计。 跟着走？No！它只是固定在那里 导航栏不会真的跟着走的，我们只是给它添加一个 position 为 fixed的样式。这么做的同时还需要调整 width 为 100% 并将下一个元素 section 下移： .navbar-main position: fixed !important width: 100% !important top: 0px .section margin-top: 45px 当然，也可以采用 sticky 不过兼容性会差一些，在此案例中效果是一样的。使用 sticky 就不需要设置 section 的下移，不过需要设置 top 属性： .navbar-main position: sticky !important position: -webkit-sticky !important top: 0px 「瘦身」+「毛玻璃」，让导航栏灵巧一些 接下来我想让导航栏看起来更轻巧一些，于是缩窄了导航栏的高度并加入了所谓「毛玻璃」效果。 「瘦身」 通过修改 navbar-item 的内外边距来缩窄高度： .navbar-item margin: 4px !important padding: 8.5px !important 同时 Icarus 原版对于移动端的处理是将 logo 放在一个自适应的 div 里，当屏幕宽度小于 1088 px 的时候，导航栏会分成上下两行。 但这对于一个一直固定在顶端的导航栏来说太大了，所以这里我做了个修改，将自适应去掉，把 logo 也放在 navbar-menu 里： layout/common/navbar.jsx- &lt;div class=&quot;navbar-brand justify-content-center&quot;&gt; - &lt;a class=&quot;navbar-item navbar-logo&quot; href={siteUrl}&gt;{navbarLogo}&lt;/a&gt; - &lt;/div&gt; &lt;div class=&quot;navbar-menu&quot;&gt; + &lt;a class=&quot;navbar-item navbar-logo&quot; href={siteUrl}&gt;{navbarLogo}&lt;/a&gt; ... &lt;/div&gt; 效果图： 当然，还有些更好的方案，比如制作下拉菜单栏，以解决导航栏里的标签页太多超出屏幕宽度的问题，可以见这个旧版本的 PR。有空的时候我会改进导航栏，如果真的有人看的话。 「毛玻璃」 所谓「毛玻璃」，更专业一点的说法叫「Backdrop Filter effect」，即背景过滤效果。所以核心就是 backdrop-filter 样式。我这里依旧模仿的 Apple Newsroom，将 navbar 背景色变透明并增加饱和度和模糊： .navbar -webkit-backdrop-filter: saturate(180%) blur(20px) backdrop-filter: saturate(180%) blur(20px) background-color: rgba(255,255,255,0.7) !important //黑暗模式下颜色为 rgba(29,29,31,0.7) 再将 navbar-menu 背景设为透明，这样小尺寸屏幕下也能正常显示： .navbar-main .navbar-menu background-color: transparent 效果图： 最后，修复锚元素定位 我们固定了导航栏，紧接着问题就来了。你会发现之前的页内锚元素跳转全都错位了（比如目录、脚注），更准确的来说是正好被现在的导航栏所遮挡，所以我们要来修复这个 bug。 脚注修复 先来修复简单的，修复脚注我们只需要用到 CSS（因为新版目录是用 JavaScript 来控制 href 属性值的，这个方法就不行了)，这里我们用到一个小技巧，即用 :target 去定位目标元素，并用 ::before 在前面加一个空的行内元素，然后通过 padding-top 和 margin-top 配合来控制位置这样就修复了正文到脚注的跳转错位： :target::before content: &quot;&quot; display: inline-block padding-top: 73px margin-top: -73px 稍微解释一下，这里就是先用 padding-top 将这个空的 inline-block 移动到距离其容器上方 N px 的位置，然后通过 margin-top 将这个容器整体上移 N px 的位置，这样我们就可以通过调整 N 的值来控制元素的位置。 同理，我们还需要修复下脚注到正文的跳转： .footnote-item::before display: block padding-top: 55px margin-top: -55px margin-bottom: -25px 这里有一些细微的差别，因为脚注是一个列表，列表的元素应该按一整条一整条来看，所以我们把 display 改为 block，再按照之前的方法适当调整一下距离，最后我们还需要通过 margin-bottom 来对齐文本和序号。 目录修复 如果你不需要一个「随着滚动到不同位置，动态折叠展开」的目录，你可以使用这个旧版本的 toc.js，并且采用上面修复脚注的方式来修复错位，这里我就不赘述了。 如果你需要这样一个「智能」的目录，请采用最新版本的 toc.js 并把它放在 source/js 里，这里我只说下对于错位的修复。 首先在 source/js/toc.js 中创建一个 scrollTo 方法来代替不支持偏移量的 scrollIntoView 方法： function scrollTo(id) { var element = document.getElementById(id); var headerOffset = -20; // 偏移量 var elementPosition = element.offsetTop; var offsetPosition = elementPosition - headerOffset; document.documentElement.scrollTop = offsetPosition; document.body.scrollTop = offsetPosition; // 适配 Safari } 没有什么可说的，非常好理解，然后在下面替换即可： if (typeof $heading.scrollTo === 'function') { - $heading.scrollIntoView({ behavior: 'smooth' }); + scrollTo($heading.id); } 就是这么简单，我们完成了所有错位修复。 写在最后的、其他的一些玩意儿 感谢你看到这里，零基础的我可能比较啰嗦，这当然不是我在视觉和交互上做出的全部修改，尽量挑了些对我来说比较有代表性的「坑」，大佬们见笑了。一些细枝末节的修改，网络上可能已经有无数篇相同的文章教你如何去操作了，我就不费口舌了。当然如果你有任何疑问、评价或想教我做事儿，也请不要吝啬，请在文末的评论区给我留言，我会第一时间回复。 这是 Candy 主题修改系列的第一篇，应该也是最零碎的一篇，我非常迫不及待地想分享关于黑暗模式的实现，但是先忍住，下一篇将会是关于 Twikoo 的，一个非常崭新的评论系统，美观、安全、易用、免登录、免费等等，虽然它还有很长的路要走，但目前配得上这些美好的词汇。希望我能在官方作者写出详细教程之前发布（逃）。 本文完。 原创封面图，使用需授权，请勿盗用 脚注 Icarus 主题的 GitHub 仓库主页 ↩︎ .wrap( wrappingElement ): Wrap an HTML structure around each element in the set of matched elements. ↩︎ Stylus 是富于表现力、健壮、功能丰富的 CSS 预处理器，详见官网。 ↩︎ 再谈 CSS 预处理器｜变量作用域 - Justineo ↩︎ 图片transform其父级的border-radius失效 - 沈志勇说 ↩︎","link":"/post/icarus_to_candy_1/"},{"title":"Keysmith：录制并重现你的操作","text":"本文首发于少数派 👉 Keysmith：录制并重现你的操作，为 macOS 自动化带来更多可能 这里是 Setapp 应用介绍补完计划，该计划将收录 Setapp 上好用但还没被介绍的应用。 熟悉 macOS 的少数派们对于系统自带的 Automator「自动操作」一定不陌生。正如它的名字，Automator 允许用户在 macOS 上基于部分第一方应用或支持的第三方应用创建各种自动操作流程。作为一款隐藏的比较深的神器，少数派的作者们也挖掘出了很多「奇技淫巧」。 Automator 的操作类似加强版的 iOS「快捷指令」，采用模块化或录制的方式构建工作流程，不过有一定学习成本且支持的应用比较少。 本文要介绍的是一款更为简单直观，任何人都可以轻松上手的自动化软件——Keysmith。 特性一览👇： 录制你的工作流，并用快捷键自动化复现 支持录制本地应用和网页的操作 可以调用 AppleScript 并与第三方联动 具有「聚焦搜索」风格的快速启动器 采用 Swift 语言编写，是使用起来无比丝滑的 macOS 原生应用 全面拥抱「录制」带来的轻巧感 Keysmith 描述自己为「创建自定义快捷键」，实在是有些谦虚，看似简单的功能其实给了用户很大的想象空间。 与 Automator 相反，Keysmith 的设计十分克制，你并不可以凭空添加自动化动作，一切动作都始于你的「录制」。也正因这份克制，Keysmith 拥有十分简洁的界面。 人人上手就会的基本操作 新建一条 Macro 宏，你便可以点击右上角的「Record」按钮开始录制动作了。录制的过程中，Keysmith 会缩放到右上角并变成记录板，你可以在上面看到当前输入的动作和历史记录。录制好后只需点击「Stop recording」即可保存录制动作成宏指令。 录制完成后你也可以对录制好的动作进行微调，修改、删除或添加动作。在动作流中点击要修改的动作即可键入修改；点击动作右边的「More」按钮来删除或添加动作。支持添加的动作包括「键入文本」、「按压键位」、「点击元素」、「等待」、「运行 AppleScript」和「运行 Keysmith 宏指令」。没错，Keysmith 是可以「套娃」的。 接下来，你可以给你录制的宏指令命名（支持 Emoji）并设置快捷键和生效位置。 Keysmith 的快捷键设置支持无限长的修饰键 + 单个其他键的组合，如果愿意你也可以将单键设置为宏指令的快捷键（不过会弹出警告⚠️，因为这意味着每次按到那个键都会运行宏指令）。 有些快捷键你希望全局生效，比如通过快捷键打开某些软件；而针对某一软件内的具体操作，更合适的做法是只在这一软件内生效。Keysmith 支持**自定义指令生效的位置，**全局、指定应用都可以，你可以很方便地给常用的软件们分别添加个性化的自动操作，大大提高了 Keysmith 功能的可塑性。 完成这些操作后，你就可以按下之前设置的快捷键激活你的自动化宏指令了。 由于 Keysmith 会在前台复现你录制好的动作，在指令运行的过程中最好不要键入或点击，以免干扰到自动化正常运作。 如有需要，可以在设置中勾选开机启动或设置软件快捷键如「快速记录动作」、「运行上一次的宏指令」、云同步等。 总结下整个流程：新建 - 录制 - 设定快捷键等信息 - 运行，仅需 4 步、短短几秒就可以实现一键处理那些繁琐的操作流程。在这个忙碌的时代，「快」是 KeySmith 的核心竞争力之一。 举个例子 下面随手举个简单的实例说明下，我现在希望实现一个快捷操作：打开音乐 app - 开启「秒选随机播放」- 关闭音乐 app 窗体。 不要一上来就啪啪啪一阵乱点，我们应当首先思考确认每一步要操作什么，避免重复录制，比如： 打开音乐 app：我将点击程序坞里的音乐 app 图标，因为我平常将它固定在我 Dock 栏的固定位置。 开启「妙选随机播放」：我可能并不会首选按住 ⌥ Option 并点击播放键边上的按钮的方式，而会采用**点击顶部菜单栏中的「控制」选单，然后点击「妙选随机播放」**或使用快捷键 ⌥ Option + 空格（如果该快捷键没有被占用的话）。 关闭音乐 app 窗体：我可能会首选 ⌘ Cmd + w 关闭窗体。 如此操作有些其实是冗余的，这里例举出来只是为了给大部分自动化场景一个参考，让它们适用且稳定可靠，在后文中「注意事项和小贴士」板块会详细介绍这一点。 思考好流程后就十分简单了，新建、录制后走一遍流程，最后绑定快捷键就成功了🎉。 其实我们可以将第一步的「in Dock」操作删除，只留「Open 音乐」也会正常打开 app，如遇到无法识别的应用，也可以手动指定路径；在这个案例中，鼠标操作或是键盘快捷键都是可以正常识别的，所以最终简化版如下： 按下自定义的 ⇧ Shift + ⌘ Cmd + M 尝试一下： 是不是十分方便快捷？当然你还可以制作更简单的操作，比如给常用的应用添加快速启动快捷键等等；你也可以制作更复杂的操作，比如…… 我们接着往后看： 不仅操控本地，也能操控云端 是的，Keysmith 还支持制作操控网页的自动化宏指令，这需要我们安装对应的浏览器插件。目前，Keysmith 支持 Chrome 和 Firefox 浏览器，你可以在初始化设置时安装或前往浏览器应用商城自行安装。 这样，Keysmith 就可以根据 Chrome 浏览器中的网页响应和 DOM 结构来制作基于网页的自动化流程了。比如下图就演示了在少数派首页查看「关注」标签页的例子，可以看到有一个「Wait for the page to load」即等待页面加载，这是由你录制时候的行为决定的。如果你在录制的时候等待网页完全加载了，那么在动作中也会记录下这一倾向。 对于 &lt;li&gt; 标签的列表结构，Keysmith 还支持点选列表首位或末位元素。 锦上添花，与第三方联动 你可能注意到了 Keysmith 支持在动作中添加 AppleScript 和用户已创建的 Keysmith 指令，脚本和「套娃」的支持极大地扩展了 Keysmith 的上线，你可以在少数派中查看「AppleScript」相关文章 学习脚本的编写。 除此之外，我还想再提一个让苹果效率用户快乐的词——URL Schemes。简单来说，URL Schemes 是可以链接到软件内部的链接，第三方软件可以通过它跳转到某一软件或调用其功能，关于「URL Schemes」少数派中也有大佬做过 详细介绍 。 Keysmith 中每一条指令都有其对应的 URL Schemes。右键创建好的宏指令，点击「Copy Macro URL」即可复制形如 keysmith://run-macro/F1FCD7CD-E276-4C87-848F-12F3CB8D5878 的 URL Schemes。 带上链接去创造吧 接下来你就可以用 URL Schemes 去和脍炙人口的效率工具们联动了，比如同在 Setapp 里的 BetterTouchTool 以及 Alfred、Keyboard Maestro 等，相信你能探索出更多玩法。 另外官方 博客 中还提供了在不同平台和编程语言中使用 URL Schemes 的教程供你参考。 注意事项、小贴士和其他问题 除了上面提到的「运行时尽量不要操作」外，你可能还需要关注以下几件事👇。 不可忽视的录制技巧 你应该发现了，Keysmith 的设计理念其实和 Automator 并不相同——前者强调实际的点击或键入，是可视的、是在「明处」的；而后者则强调流程和步骤的输入输出，大多数情况可以是不可视的、是在「暗处」的。 意识到这一点在实际使用中是十分重要的，这意味着我们录制动作时需要考虑到不同场景下的「可复用性」，下面是一些坑： 建议使用更普适的动作和路径，比如尽量直接使用「Open 某 App」 的动作或点击程序坞中的固定图标、通过终端命令行打开文件或文件夹等，其次是通过 Spotlight 或启动台打开，这样可以避免出现可能的定位错误或依附于无法录入的滑动操作等情况； 优先选择最先加载出来的左上角菜单栏，其次是键盘快捷键最后是鼠标点击，这是因为键盘快捷键和左上角菜单栏的设定很固定、很少做改动且生效很快，保证了自动化的鲁棒性； 当使用网页自动化的时候，需要注意 Keysmith 是无法辨别多个相同元素的，比如少数派首页的「一派」和「Matrix 精选」都有「查看全部」按钮，Keysmith 就不知道该点哪个了，这时只能使用点击某固定点的方式了； 使用「点击元素」这个功能时要好好考虑，因为当你点击的地方没有检测到可点击控件或结构时，它便会点击元素在窗口的相对位置，而很多时候目标元素会随着窗口大小的变化而位移，并没有键盘操作或菜单栏来得可靠。 不过经过大量测试，即使是网页，大部分情况下 KeySmith 都可以很好地识别控件或 DOM 结构，你只需要留意操作过程中识别是否正常即可。 不知道要弄些啥？来看看官方的案例参考 如果你不知道该用 Keysmith 做些什么，官方网站有不少 案例 也许可以给你带来一些灵感。 官方将国外一些常见的办公、协作软件作为例子展示了软件的各种特性， GitHub、Google Docs、Slack、Trello、Zoom 等等都是我们所熟悉且可以模仿学习的，最后列举出的 AppleScipt 也很值得参考。 指令太多，快捷键记不住？请使用快速启动器 当我们创建了太多指令后，难免会忘记对应的快捷键，这时只要按下 ⌥ Option + ⌘ Cmd + 空格 即可激活一个很清爽的快速启动器，不得不说作者想的很周到。当你通过快速启动器搜索、点选你想要的指令后，无需跳转到 Keysmith 便可执行指令。 我是 Keyboard Maestro 用户，Keysmith 和它有什么区别？ 我知道，Keyboard Maestro 用户看本文可能急死了，Automator 开头都提了，更加强悍的 Keyboard Maestro 呢？！是的，Keyboard Maestro 作为老牌效率软件口碑很好、很棒、很强大，两款相似又好用的工具难免被拉来做对比，具体区别就不在本文赘述了。简单来说，Keyboard Maestro 确实拥有更多的复杂功能 ，但 Keysmith 更加简洁，更加面向大众。对此 Keysmith 官方打了个也许不是那么恰当的比喻👇。 If using Keyboard Maestro is like driving a stick shift, using Keysmith is like driving an automatic. Both are fine choices – it’s largely a matter of personal preference. 感兴趣的可以看看官方的 对比博文 。 获取方式与价格 你可以在订阅制应用商城 Setapp 中 获取它 ，或在 官网 购买 29 美元的单设备许可证（目前只支持银行卡支付）。 WeMod 世界上最好的游戏修改器合集 w 免费 .steam-icon{background-color:#171a21;color:white} .stardock-icon{background-color:#014b8d;fill:white;} .taobao-icon{background-color:#fe8600;} .dark .fences-icon{background-color: #1d1d1f} .fences-icon{background-color: white} .fences-icon{padding:7px !important;display: flex; align-items: center;} .fences-icon img{border-radius: 0px !important;vertical-align:middle;object-fit: initial !important; height: auto !important;} 以上就是关于 Keysmith 的介绍，它是 2020 年下半年刚出的一款「新生儿」软件，这个时代渐渐拥抱极简，相信它可以做的越来越好。当我在 Setapp 里第一次看到它，便被它的创意吸引，期待它可以支持更复杂的逻辑。我认为 Keysmith 的威力不止于此，本文只是抛砖引玉，期待大家挖掘出更多新奇的玩法。 Keysmith 为你的 Mac 和网络创建自定义键盘快捷键 S ⌘ $ 29 .steam-icon{background-color:#171a21;color:white} .stardock-icon{background-color:#014b8d;fill:white;} .taobao-icon{background-color:#fe8600;} .dark .fences-icon{background-color: #1d1d1f} .fences-icon{background-color: white} .fences-icon{padding:7px !important;display: flex; align-items: center;} .fences-icon img{border-radius: 0px !important;vertical-align:middle;object-fit: initial !important; height: auto !important;}","link":"/post/macOS_setapp_keysmith/"},{"title":"WeMod：世界上最好用的单机游戏修改器","text":"本文首发于少数派 👉 世界上最好用的单机游戏修改器——WeMod 修改不了人生，但你可以修改游戏。 游戏修改器，属于 PC 玩家的「地下王国」 做为一名单机游戏玩家，你一定遇到过以下场景： 这款游戏太难了，而我只想体验剧情 xxsss这条任务太烦了，而我并没有那么多时间去刷 这个角色太菜了，而我想让他「上天入地」、子弹无限、技能无冷却等 …… 也许你在游玩《赛博朋克 2077》的这几天就有过这种无力感。 幸运的是，作为一个「PC 党」，最幸福的事莫过于对买到手的单机游戏有完全的支配权。 于是你兴高采烈地搜索「游戏名 + 修改器」，来到那些花里胡哨的门户网站，并熟练地穿过层层广告和诱导陷阱，下载了由「风灵月影」大大制作的「XX项修改器」。 大多数情况下修改器非常好用，下载过程中捆绑的软件也并不能影响到「久经沙场」的你。直到你发现电脑中堆满了这个图标👇： 这时你才开始思考一个问题：还有更「优雅」的解法吗？ 能用，但是不够「优雅」。相信「风灵月影」大大本人也是这么想的，于是制作了自己修改器的 集合版本 ，但它有着「安装过程捆绑软件」、「太多无关内容和广告」、「没适配高分屏」等几宗罪，所以本文的主角并不是它。 本文要介绍的是一款具有现代化设计的修改器整合软件——WeMod。这款软件「优雅」的同时可谓是「降维打击」。对于喜欢修改游戏的玩家来说，我相信「用了便回不去了」。 一切关于游戏，一切为了玩家 简洁的启动体验 WeMod 非常干净简洁，且安装包只有 100 多 KB，从 官网 下载至安装、使用的过程中，也没有一丝广告和捆绑软件。 初次打开软件后别被登陆框所吓到，直接点击右下角的「Continue with New Account」便会帮你创建一个账号并进入主页，整个过程无需输入任何信息，非常快捷。新账号会附赠 100 WePoints 点数，点数的作用将在后文介绍。（如果要保存点数或参与社区讨论等，你可以之后在设置中绑定邮箱。） WeMod 的设计简洁大气。首先印入眼帘的便是时下热门游戏的轮播图，右下角的「活动」会显示修改器们的更新时间轴，完成右上角的「目标」可以赚取 WePoints 点数。 超过千款游戏支持 WeMod 目前支持超过千款热门游戏，且每周都会追加游戏列表。由于很多修改器原作者都入驻了，所以修改器内容更新也是最全最及时的。千款游戏听起来不多，但其实已经涵盖了主流热门游戏（供参考，「风灵月影」大大共制作了 700 多款修改器），至少在我使用过程没有出现想要的游戏没有对应修改器的尴尬情况。 你可以在 官网 查看并检索游戏支持情况 自动游戏检测 WeMod 将会自动检测你库中的游戏，并适配对应版本的修改器。支持自动识别 Steam、Epic、Windows Store、Uplay、Origin 等主流平台。 检测到的游戏将出现在「游戏库」标签页的左侧，它会按照「兼容」、「可能兼容」、「不兼容」来分区（目前我的「不兼容」分区里是空的）。你还可以将喜爱的游戏放入游戏收藏夹，它会显示在列表最顶端，就像本图中的《看门狗：军团》。 同时在右侧会显示「最近玩过」、「新游戏」和「人气游戏」。 多样化的版本支持 你可能注意到上图的「人气游戏」板块，《赛博朋克 2077》出现了两次，这是因为 WeMod 上修改器是分平台的！也就是说你不必担心，不同平台的游戏版本差异导致修改器不能正常工作，WeMod 已经贴心地帮你处理好了这些。 不仅如此，WeMod 还会对不同图形接口进行适配，比如《控制（Control）》就分了DirectX 11 和 DirectX 12 两个版本。 可以说，WeMod 为了让你安心地使用修改器，下足了功夫。 直观且丰富的修改器控制界面 修改器本体 终于进入到「主菜」了！其实修改器是一种功能导向性软件，而且大部分时间在后台运行，即用即扔。这就意味着，如果核心功能不能打，「配菜」再怎么花里胡哨也无济于事。 那么 WeMod 的修改器部分到底能不能打呢？当然能。我们还是拿《赛博朋克 2077》为例。 可以看到针对《赛博朋克 2077》，修改器按照「玩家」、「物品栏」、「统计数据」、「武器」、「敌人」、「游戏」六个板块进行了分类，左侧文字是功能描述，右侧的键位则是激活功能的快捷键，总计 32 种可修改功能，给足了玩家「骚操作」的空间。其他的游戏也都是如此，会按照板块分类，提供丰富功能的同时也实现了排版上的清晰。 更令人喜爱的小功能是，你可以通过点击右侧的键位更改成自己想要的快捷键，这是大部分修改器所不能做到的。 那如何开始使用修改器呢？只需点击右上角的「开始游戏」，即可通过键盘快捷键来激活修改器的功能。 你可能注意到上述截图中的很多修改器作者名都是「FLiNG」，且《赛博朋克 2077》的修改器和最开始的截图功能一致，也是「三十二项」的。对，没错，「FLiNG」就是「风灵月影」本人，他在今年十月底正式加入了 WeMod 团队。同时有很多类似的开发者大大也加入了 WeMod 团队，所以你无需担心修改器的质量或功能数量问题，WeMod 平台绝对是更新最及时、功能最全的。 「注释」、「讨论」、「历史记录」 在修改器的右侧，你可以看到「讨论」和「历史记录」板块，可能也会有「注释」板块。这也是 WeMod 的特色功能。「注释」、「讨论」、「历史记录」分别起到了「使用提醒」、「社区讨论」和「版本管理」的作用。 举例说明，比如《看门狗：军团》这款游戏，由于 Uplay 平台有 BattlEye 反作弊保护，要使用修改器需在启动器中添加参数来禁用 BattlEye。这段描述就被写在了看门狗修改器右侧的「注释」中。 点击「讨论」则会跳转到修改器的对应论坛页，你可以在上面看到详细的介绍、演示或重要事项，以及按时间线排序的开放讨论区。 而点击「历史记录」，则可以看到指定修改器的更新历史，最强悍的地方就在于，这份时间线是可以随意切换的，你可以通过点击历史版本手动调回旧版本。 关于鼠标激活和多语言的一些问题 说了这么多修改器的优点，但其实还是有些小「缺陷」的。 免费用户无法通过鼠标点击激活功能，不过一般修改器是后台使用，就我个人而言影响不大。 如你所见，目前修改器功能介绍并没有支持中文，然而修改器对应的都是游戏中的简单英语，对大部分用户也不影响使用。 对于前一个问题，如果非常在意，可以通过升级 Pro 用户来解决；对于功能汉化问题，其实无需担心，官方已经在有意推行着多语言翻译问题，比如界面的「简体中文」支持是最新版本才更新的，而修改器、新闻等更多的中文翻译，官方承诺将采用社区翻译的方式上线，相信很快就可以解决。 活跃且健康的社区 WeMod 维护着一个活跃且健康的 社区 ，社区的讨论氛围好、专注制作修改器的大佬也多。 除了现有的修改器，每一个 WeMod 用户也可以「请求」新游戏修改器上线或修改器更新。通过完成「目标」获得的 WePoints 点数来兑换「代币」即可给心仪的游戏「投票」。（兑换比例 250 比 1，Pro 用户每月可获得 5 代币） 看不见但很重要的安全问题 国产修改器最让人诟病的莫过于，被黑心商人「二次包装」。用广告或捆绑软件恶心人还算好，天晓得会不会植入什么病毒，本来想修改游戏，结果把电脑给「修改」了就不好了。 然而使用 WeMod 就完全不需要担心这种问题。一是有大量用户长时间使用，且社区活跃，有什么问题也可能会被及时发现。二是官方也提供了完整的病毒检测报告，感兴趣的话可以在 VirusTotal 查看报告详情。 到此为止，便是 WeMod 免费用户的全部功能，可以说是完全够用了，下面将介绍付费功能。 如果富裕，可以升级至专业版支持他们 这么良心的软件，他们通过什么方式赚钱？ 用户充值 WePoints 点数或「代币」来给请求的游戏投票 订阅制的专业版（Pro）会员 下图非常清晰的展示了专业版到底多了哪些功能： 可以看到 WeMod 专业版里最「重量级」的功能其实是通过手机来「远程控制」修改器。这是一个非常方便的功能，相当于给了一个直观的外置控制面板，你无需去记忆快捷键位也无需切出，只需要在手机上动动手指就可以远程控制修改器，提高了游戏的沉浸感和体验。此 App 支持 iOS 和安卓。 剩下的功能，「鼠标控制」、「更多投票数」和「更多主题色」其实是比较无关痛痒的。专业版月费 7.99 美元，年付月费 5 美元，支持银行卡和 PayPal 支付。价格不低，维护社区不易，升级就权当支持 WeMod 团队了。 哦对了，其实你也可以通过「邀请朋友」来获得 1 周的专业版会员资格。 最后，WeMod 官网是这么介绍自己的👇（广告法警告⚠️） WeMod is the world’s best application for modding hundreds of single-player PC games. 重新回顾 WeMod：干净简洁的用户体验和设计、既多样又人性化的整合形式与使用方法、修改器领域独一无二的社区文化、时刻保持功能创新、内容质量良心的免费版…… 嗯，我想 WeMod 它确实如此「best」，当之无愧。 WeMod 世界上最好的游戏修改器合集 w 免费 .steam-icon{background-color:#171a21;color:white} .stardock-icon{background-color:#014b8d;fill:white;} .taobao-icon{background-color:#fe8600;} .dark .fences-icon{background-color: #1d1d1f} .fences-icon{background-color: white} .fences-icon{padding:7px !important;display: flex; align-items: center;} .fences-icon img{border-radius: 0px !important;vertical-align:middle;object-fit: initial !important; height: auto !important;}","link":"/post/windows_wemod/"},{"title":"Overlap：最实用的智能世界时钟，助你和跨国团队寻找完美时间","text":"本文首发于少数派 👉 Overlap：最实用的智能世界时钟，助你和跨国团队寻找完美时间 来自 Moleskine Digital Studio 开发的 Overlap 是一款免费的智能世界时钟，支持 iOS、iPadOS 与 macOS。App Store 的 今日 App 也简单介绍过这款软件。 对于 Moleskine Digital Studio 这个团队大家应该已经有所耳闻了，他们凭借恰到好处的创意和独具风格的设计开发过数款广受好评的效率、生产力应用，如 Timepage、Actions、Flow 等，其中 Flow 还获得了 2019 年的 「iPad App of the Year」和「Apple Design Awards」。对他们其他产品感兴趣的朋友们，可以自行在少数派中检索相关文章。 很多人误以为 ，这些软件都是由这个意大利著名的笔记本厂商 Moleskine 独立开发的，其实 Moleskine Digital Studio 是 BONOBO 和 Moleskine 合作建立的，而 BONOBO 才是主要负责开发的团队，却似乎鲜有人知。 在高度迭代中寻找秩序，BONOBO 在 官网 中用上图很形象地表明了他们做事的风格和方式 我为什么需要强调这一点？因为 BONOBO 恰好是一个完全远程的跨国开发团队。他们的团队分布在 5 个不同的时区，为了解决恼人的时间问题，他们开发了这款 Overlap 并免费提供给用户❤️。他们团队宝贵的经验，在这个疫情仍旧肆虐全球的特殊时期，显得极具参考价值。尤其是对跨国团队、学术界和留学生们等这些生活在各种时区的群体来说。 「难得一见」的简约大气，对他们来说却「一如既往」 Moleskine Digital Studio 的产品中总有着标志性的大色块，这在现在的 App 市场中并不多见，因为大色块的同时想要设计得精美且实用并不是一件容易的事。这里一定有 Moleskine 的功劳，BONOBO 早期作品就并不具备这种简约大气的风格。而作为欧洲最老牌最传奇的笔记本厂商之一，我们有理由相信 Moleskine 将他们多年的审美和设计经验也带到了他们的 App 中来。 这次的 Overlap 也不例外，拥有简洁大气的主视觉，大色块仍旧是主旋律。 「顺滑」的基本操作和交互 在 Overlap 里每一天是一个完整的色块，在每一天的交界处可以看到两个色块的分隔，用可视化的方式告知你一天的结束和新一天的开始。你可以通过左滑或右滑来「穿越」时间线，看看几小时前的过去，或几天后的未来。同时 Overlap 会在触觉上用颗粒感的震动，在听觉上用齿轮般的咔嚓声让你感知到时间的流淌。在文字信息上，时间、地点、日期、星期、时差等也一个不少。 点击右上角的「+」号即可按照国家或城市搜索你想要的地点，并添加到世界时钟列表里。同时添加后，也支持重新自定义地点名称。你也可以点击进入一个时区，然后点按星星按钮，将当前时区设为自己所在的时区，左侧的时差会按照你的当前时区为标准计算。（macOS 端可以直接右键「设为当前」。） 同时，Overlap 还支持显示你的日历活动，点击右上角的「⋯」，即可选择想要的日历在最顶部显示。 当选定的时间前后已有日程安排，则会在最顶部以条状的形式显示，比如下图分别显示了四天后的元旦和我个人三周后的课程。日程事件会以条状的形式滑动，而条状的长度对应实际的时间长度。（注意，「多长的色块代表一小时」，在 iOS 上是可以通过双指捏合、张开来调整的；macOS 可以在菜单中调整。） 还记得 Timepage 初始化的时候会让你在众多色彩中挑一个喜欢的，Overlap 沿袭了这一优良的传统，有六种主题色、两种颜色模式供用户挑选，iOS 用户可以通过在主页面下拉改色，而 macOS 用户还可以通过菜单栏或快捷键 T 来实现。 下拉会有愉悦的震动带来的顿挫感，方便你在喜爱的颜色处停顿换色 默认三色模式以浅蓝深蓝显示白天和晚上，以绿色显示「可用档期」。双色模式将白天和晚上都显示为灰色，并将「可用档期」突出显示为我们选择的颜色。 等等，「可用档期」？那是什么？这就要说到 Overlap 最大的特性了。 关键词是「重叠」，成熟团队游刃有余的思考 Overlap 的中文释义是「重叠、交叠」的意思，这恰恰描绘了它的核心功能。它的诞生其实主要为了解决跨国团队协作的时间问题，对跨国团队来说，协调一个大家都方便的时间是最伤脑筋的。而 Overlap 的做法是，将不同时区的团队成员的「可用档期」添加进来，并通过算法智能显示对所有成员来说重叠度最高、最合适的时间。 天涯共此「时」 让我们假设一个场景来说明这个功能：在未来的某一天，身处德国的 @sainho、身处英国的 @SpencerWoo 和身处美国西部的 @异次元de机智君 将共同开会商讨少数派新作品的选题，我们该如何选择最合适的会议时间呢？ 大家都知道 sainho 是一个时间管理高手，他一般会在早上 8 点到 11 点半左右来处理少数派的事；而 SpencerWoo 和我都是在校学生，可能晚上会更有空一些。 于是我们把各自的「可用档期」输入到 Overlap 中，设置前后灵活时间（会以渐变的形式体现在时间色块上），并将不需要的时区折叠： 现在点击最下面一直在骚动的「小波浪」，即可打开智能时间波浪视图。在这个视图中，浪峰越高代表这个时间段对大部分成员越合适，这样就可以轻松找到对于团队来说更合适的会议时间了。 这动态波浪的设计真是令人着迷，强烈建议大家都下载下来欣赏一下。通过它的视觉辅助，我们可以更轻松地比较不同时间点对团队的合适程度。 当拟定一个时间点后，我们如何把这个时间点分享给其他成员呢？只需要点击右下角的分享按钮，即可调出选单。 我们可以选择「拷贝」这段自动生成的文段： 2022年X月X日 星期四 下午11:30 (GMT-8)怎么样？ 那是在英国 SpencerWoo 为上午07:30 和在德国 sainho 为上午08:30。 或点击「预定事件」在系统日历中创建带时区信息的日程： 当然你也可以点击「在 Timepage 中安排」，来和 Moleskine Studio 中的其他套件联动。 简洁之余的贴心 是的，这是一款非常简洁的世界时钟软件，但它并没有忽略一些更加深度一点点的用户。 该有的特性一个不少：自动 iCloud 同步、iPadOS 和 macOS 上的键盘快捷键支持、快捷指令、iOS 和 macOS 双支持的新版小组件，不得不说开发商走心了！ iCloud 同步： Overlap 是支持 iCloud 同步的，但它并不会在 iCloud 中创建专属文件夹，也没有特别说明，\b也不需要账号同步，所以一开始我并没有发觉。 但它确实是支持的，在 iOS 端的 iCloud 设置中你可以发现 Overlap 的开关。 这里有个使用中的「坑」，如果需要多平台使用的用户，建议先把所有端的 Overlap 都打开一遍，再设置自己的世界时钟；否则打开新客户端的时候有可能会添加初始自带的几个世界时，影响同步。 键盘快捷键： 估计是得益于 Mac Catalyst，让 Overlap 可以在多端保持统一的设计和逻辑，所以 iPadOS 和 macOS 的快捷键是一致的。老规矩，在 iPadOS 长按 ⌘ Cmd 即可打开快捷键提示。 快捷指令： Overlap 目前有两个快捷指令操作，你可以点击 这里 下载一份样例。这份样例将找到 6 个合适的会议时间，允许用户选择其中一个并创建事件。如果你感兴趣，也可以在 官方教程 中了解更多细节。 支持 iOS 和 macOS 新版小组件： iOS 端的小组件支持「大、中、小」三种视图，保留了软件内的颜色设定。长按「编辑小组件」可以调整时区的顺序，日期与时区是否显示等。 说实话，正是 macOS 端的新版小组件支持让我注意到了它。macOS 端的小组件支持真的很涨好感，对于一个在 Mac 中装了 200+ 软件的人，在侧边栏小组件中居然只能找到四个非官方的小组件，可见 Overlap 还是走在开发者前列的。 写到这里，Overlap 的全部特性就都介绍完了，如果你比较较真或热爱软件，你可以看看后面的横评与一些可以改进的地方。 [Overlap由Moleskine Studio呈现](https://sspai.com/app/Overlap由Moleskine Studio呈现)[相关文章](https://sspai.com/app/Overlap由Moleskine Studio呈现) 其他同类 App？是时候比一比了 谢谢你看到这里，下面我们让 Overlap 来和同类软件比一比，我只挑选了少数派中比较热门的两款软件：来自 FLUID Design GmbH 的「Onetime.」和 @Tolecen 的「晓时」。后者我派应该非常熟悉了，就是优秀 OCR 软件「白描」的开发者。 此前，我是忠实的晓时用户，还当起了「推广大使」，分享给了很多同学。（我也是忠实的白描用户，恭喜 macOS 版本上线。） 但从今天起我可能就变为 Overlap 粉了。（逃） 各具风格的设计 在我眼里，时钟从来就不止是单纯的计时工具，更承载了美的责任。 设计时钟，也是在设计如何将信息以更好的方式传递给用户。 不禁让我想到了 Alan Kay 的名言： People who’re serious about software should make their own hardware. 用来形容钟表制作意外的合适，每一个做钟人就像一个软件硬件设计通吃的工程师。 数字化的发展，让我们有机会亲身体验、触摸优秀的时钟是什么样的。对于一款世界时钟软件，Onetime. 和晓时的设计在我看来和 Overlap 一样都是足够优秀、足够美的，甚至 Onetime. 更加艺术，晓时更加商务。 在 Onetime 中你可以得到一个「真实」的时钟，你可以感知到日出日落，拨动表盘，你能通过动效感受到太阳从海平面升起、落下，极富诗意。但也正因为这份诗意，让他在效率上和另两款软件相差甚远，也很难设计出富有特色的小组件，因此也没有。 广受好评的设计，像是一件艺术品 在晓时中，一切信息清晰明了，没有多余的设计，也没有日程管理——事实上本文中晓时的两张图就是它的全部了。给我的体验就像走进一家高级商务酒店，在酒店的前台后墙上显示晓时的横屏视图也毫不违和，是一种名为「黑」的克制： 「年久失修」带来的遗憾 这两款 App 上次更新都是一年前，也就说没有对 iOS 14 进行专门的适配，这就造成了使用上的一些问题和遗憾。 简单来说，Onetime. 最基础的添加城市功能，不论我采用何种网络，都会卡着转圈，对我和许多新用户来说可能就是不可用的状态了。 至于晓时，我猜 Tolecen 先生可能是把精力都放在「白描」上了，这也造就了「最好用的中文 OCR 文本识别工具」的 Mac 端；又或许是「晓时」作为一款非常克制的世界时钟软件，已经达到作者想要的标准了。可以理解，因为在接触 Overlap 前，我认为晓时已经基本完美了，尤其是对轻度的个人用户而言。不过如果可能，支持 iOS 14 小组件也许能让晓时扳回一局。 订价和平台 Onetime. 和 Overlap 一样都是免费的；晓时也几乎免费，只需 1 元，在我看来完全值得。 但多平台可能是「硬伤」，这三者中只有 Overlap 是 iOS、iPadOS、macOS 全平台的。 总的来说，对 Onetime. 和晓时都可以有所期待，它们可以通过升级适配来让自己在新系统中表现的更好，不过在等待的期间我可能会选择 Overlap。 Overlap 完美吗？也许并不够 夸了那么多 Overlap 的优点，但它完美吗？谁都知道这个世界上并没有完美的事物，Overlap 的开发团队 Bonobo 当然也知道，于是他们准备了一个 网站 来接收建议，你可以在上面提出建议并给建议中的特性投票，请记住，Overlap 是一个非常新的软件，它还有可能在我们的参与下变得更好。 就我个人体验，我认为 Overlap 还有以下几点可以改进： 支持导出、分享的团队时钟配置，这样就不需要每个成员都手动添加一遍全员的时区； 更大的日历视图，现有的设计只能看到很短一段时间内的日程安排； 更丰富的档期设置，比如单独设置一周中每一天的档期、一天内多段档期的支持等； 让标记为「正忙」的系统日程降低「智能波浪」的决策权重。 （机智君的要求真的很严格呢～） 结语 总而言之，Overlap 是一款全面的、富有创新的、既适合留学党等轻度用户，又适合跨国团队的智能世界时钟。 在这个全球愈发封闭的时代，如果你要寻找一个「完美时间」去联络这个星球其他角落的人们，Overlap 可能是最佳选择。 PS：本文「天涯共此「时」」板块举的虚构例子中出现的少数派们 @sainho 和 @SpencerWoo ，成文前已得到他们的批准，他们都是最优秀的少数派，感谢他们的友情出演❤️。 PPS：我和 SpencerWoo 目前并不在国外。 拓展阅读： 做了最美日历的 Moleskine，又出了一款好看的清单应用：Moleskine Actions | App+1 当最优雅的 Moleskine 日程本变成一款 App，年度最佳日历应用：Moleskine Timepage App Store 年度 iPad 应用，新人也能快速上手的绘画工具：Flow","link":"/post/app_overlap/"}],"tags":[{"name":"软件推荐","slug":"软件推荐","link":"/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"},{"name":"效率","slug":"效率","link":"/tags/%E6%95%88%E7%8E%87/"},{"name":"信息管理","slug":"信息管理","link":"/tags/%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"博客主题","slug":"博客主题","link":"/tags/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"评论","slug":"评论","link":"/tags/%E8%AF%84%E8%AE%BA/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"系统杂谈","slug":"系统杂谈","link":"/tags/%E7%B3%BB%E7%BB%9F%E6%9D%82%E8%B0%88/"},{"name":"一日一技","slug":"一日一技","link":"/tags/%E4%B8%80%E6%97%A5%E4%B8%80%E6%8A%80/"},{"name":"漫画","slug":"漫画","link":"/tags/%E6%BC%AB%E7%94%BB/"},{"name":"海贼王","slug":"海贼王","link":"/tags/%E6%B5%B7%E8%B4%BC%E7%8E%8B/"},{"name":"交互设计","slug":"交互设计","link":"/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"},{"name":"Setapp","slug":"Setapp","link":"/tags/Setapp/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"iOS","slug":"iOS","link":"/tags/iOS/"},{"name":"iPadOS","slug":"iPadOS","link":"/tags/iPadOS/"},{"name":"世界时钟","slug":"世界时钟","link":"/tags/%E4%B8%96%E7%95%8C%E6%97%B6%E9%92%9F/"}],"categories":[{"name":"一言","slug":"一言","link":"/categories/%E4%B8%80%E8%A8%80/"},{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"Power+","slug":"Power","link":"/categories/Power/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"}]}