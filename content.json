{"pages":[{"title":"","text":"啊哦，你想访问的页面似乎不存在呢。 404! 请点击按钮返回主页🏠 .animate__animated.animate__rubberBand{ font-size: 5em !important; text-align: center; margin-right: -39rem !important; margin-top: -3rem !important; margin-bottom: -25px !important; } .level-left{ display: none !important; } p { text-align: center; } .hero.is-danger{ border-radius: 25px; } .subtitle{ margin-top: -1.86em !important; } .title.is-3{ display: none; } .button.is-danger.is-light{ margin-top: -3px; margin-left: 10px; }","link":"/404.html"},{"title":"","text":"关于 .last_update{float:none}","link":"/about/index.html"}],"posts":[{"title":"种草 Trilium 了……","text":"我去，Trilium 也太赞了吧，折腾了这么久，这应该是我梦想中的知识管理软件，在少数派看了 idelem 大佬写的几篇文章，准备开始慢慢学习迁移了。","link":"/post/awesome_trilium/"},{"title":"创造 CANDY 主题，只为更好的交互","text":"📚本系列文章，将分成四个板块更新 基础设计修改 配置 Twikoo 评论 增加深色模式支持 其他细节与模块 .message-header { justify-content: start !important; } .message.is-info{ width: 50%; float: right; margin-left: 20px; margin-bottom: 11px !important; } @media screen and (max-width: 768px){ .message.is-info{ width: 100%; float: none; margin-left: 0; } } 众所周知，Icarus[1] 是一个非常优秀的 Hexo 主题。它不仅提供清爽、简洁的界面，还与各种主流插件、组件兼容的很好。更令人欣喜的是——它几乎是最活跃的 Hexo 主题之一，有着非常良好的社区氛围。作者时刻保持更新，并提供了非常完善的文档。 种种因素使我最终选择了它，并准备在其基础上修改出自己满意的设计，我将其命名为 Candy，并将在 GitHub 上与 Icarus 保持更新。本文将是这一系列文章的第一节——基础设计修改。 本人前端零基础，如有不妥，请在评论区教我做事，谢谢🙏 真正的卡片式设计——让最频繁的交互更人性化 分析 Icarus 主题很美观，但对我来说它与许多 Hexo 主题一样都存在一个核心问题，即首页的文章如需访问全文，需要点击 Read More 按钮、图片或标题才可以进入，而点击主文字或卡片空白处是没有反应的，恰好很多博主喜欢把摘要写成长篇大论，此时的 Read More 按钮看起来更小，很容易被忽视，点击大段文字也许是很多读者的第一反应，虽然这并不会得到任何回应。 点击、进入全文，这应该是每个博客最频繁的交互。尴尬的小按钮难免给读者造成一些细微的障碍，当然如果对自己的内容足够自信，或者没那么讲究的话，你就可以跳过这一节了。 尝试 为了达成真正的卡片效果，我探索过一些方法。 我的第一反应是在 &lt;article&gt; 标签外套一层 &lt;a&gt; 标签然后设置 href 属性，同时 &lt;article&gt; 要设置成块级元素。于是我便在 layout/common/article.jsx 中这样修改： layout/common/article.jsx&lt;a class=&quot;card-link&quot; href={index ? url_for(page.link || page.path):null}&gt; &lt;article class={`card-content article${'direction' in page ? ' ' + page.direction : ''}`} role=&quot;article&quot;&gt; ... &lt;/article&gt; &lt;/a&gt; 感觉非常合理，但其实并不行，如果这样操作，在实际页面中，&lt;a&gt; 标签并不会正确包裹，反而会被添加到 &lt;article&gt; 元素下每个子元素的首位。我并不确定是什么原因，但是根据 Stack Overflow 上的一篇回答中的评论： You should really point out (by suggesting this way) that: using this solution you cannot have other Anchor elements inside the article.Roko C. Buljan Jul 14 '16 at 6:51 貌似如果想这样操作的话，子元素不能再有其他 &lt;a&gt; 元素。我便以为是不可以的，当时就作罢了。 接下来，我尝试在外面先套一层 &lt;object&gt; 标签，再套 &lt;a&gt; 标签链接到正文，这样我们就实现了整张卡片可点击的效果。 layout/common/article.jsx&lt;a class=&quot;card-link&quot; href={index ? url_for(page.link || page.path) : null}&gt; &lt;object class=&quot;card-object&quot;&gt; &lt;article class={`card-content article${'direction' in page ? ' ' + page.direction : ''}`} role=&quot;article&quot;&gt; ... &lt;/article&gt; &lt;/object&gt; &lt;/a&gt; 这样确实可以了，本来这一段到这里就结束了，但我想起了文档里对 &lt;object&gt; 标签的描述： HTML &lt;object&gt; 元素（或者称作 HTML 嵌入对象元素）表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。MDN 啊这，有一丝隐隐的不安。迅速查了下 SEO，发现目前 Google 是会索引 object 元素的，但心里就是不舒服，毕竟不太符合语义。 于是乎，就换来了接下来的方法，也是最终的实现方法。 解法 这种方法的思路其实和第一种是一致的，但是具体实现有区别，这次我们不在 article.jsx 里修改了，直接在 source/js/main.js 最底下添加： if ($('.article-licensing.box').length === 0){ $(&quot;.card-content.article&quot;).each(function(){ $(this).wrap('&lt;a class=&quot;card-link&quot; href=&quot;' + $(this).find('h1 a').attr('href') + '&quot;&gt;&lt;/a&gt;'); })} 其实就是用了 jQuery 的 warp() 方法[2]，这里我们指定 &lt;a&gt; 元素来包裹 &lt;article&gt; 元素。同时因为我们只需要在首页让这些卡片有链接，所以我们可以通过判断正文末尾的版权信息盒子是否存在，来控制这条语句是否生效。 我们还需要设置一下 card-link 的 color 为 inherit，这样摘要的颜色就会恢复成白色，否则会是你 a 标签的颜色（自定义 CSS 的方法在后文）： .card-link color: inherit 这样我们就实现了整个卡片可点击，且卡片里原有的分类链接照样可以点击并不受影响。但我并不知道为何第一种和第三种方法会有这样的差异，如果有大佬清楚请在评论区解答我，谢谢。 加入一点动效会让体验更好吗？答案是肯定的 所谓「交互」，代表着交流和互动。一个好的交互设计，组件与用户的互动是必不可少的。互联网厂商们早已发现了这一逻辑，并将这些互动悄悄藏在设计里，通过微小的震动、令人愉悦的变换俘获用户的感官。 简单来说，光将整张卡片链接到正文还不够，它得是让用户有感知的，这个感知就由动效来实现。 废话少说，先上效果图👇： 为实现这个效果，我增加了： 向上的位移 阴影的变换 题图的变大（深色模式下，还增加了题图的变暗） 我希望能用纯 CSS 解决的，尽量只用 CSS。为了后期与 Icarus 同步更方便，我们修改 source/css 目录下的 style.styl 来自定义样式。Icarus 使用 Stylus[3] 作为 CSS 预处理器。它的定义生效规则是： 一个变量不能影响在定义它以前的输出样式。[4] 所以为了方便，我们可以把所有自定义样式放在最前面，把 @import 放在最后。 位移与阴影 首先，我们将位移与阴影一起添加，效果模仿自 Gridsome Blog Starter 🙏。 因为我不希望在正文处也出现动效，同时希望尽可能用纯 CSS 解决，所以我在 article.jsx 最前面添加一个只在正文生效的空的 div 元素，并通过 class 名「controller」来控制： article.jsxreturn &lt;Fragment&gt; // 通过判断 index 是否存在，来决定是否是正文。 {!index ? &lt;div class={'controller'}&gt;&lt;/div&gt;: null} ... &lt;/Fragment&gt; 这样一来，正文的最前面就会多一个空的、class 名为「controller」的 div 元素。接下来我们写伪类： .order-2 .card:hover transform: translateY(-5px) box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1) -webkit-transform: translateY(-5px) -webkit-box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1) // 将兄弟元素为 .controller 的 .card 的 :hover 样式重制（无效化） .order-2 .controller ~ .card:hover transform: none box-shadow: 0 4px 10px rgba(0,0,0,0.05), 0 0 1px rgba(0,0,0,0.1) -webkit-transform: none -webkit-box-shadow: 0 4px 10px rgba(0,0,0,0.05), 0 0 1px rgba(0,0,0,0.1) // 加入过渡效果 .card transition: opacity 0.3s ease-out, transform 0.3s ease-out, box-shadow 0.6s !important 可以看出来，这样写会有一些啰嗦和冗余，我尝试过一些想法都不太好，比如将 index 判断反写，把「controller」加在首页最上方，但 Icarus 原版的 &lt;Fragment&gt; 元素写法，会在每个卡片上加上一个 div 元素，从而打乱布局，让菜菜的我觉得麻烦，所以先就这样，日后再改。 如果有大佬们有更好的解决方案，请在评论区赐教。 点击展开查看：一个现在不兼容，但未来可能可以的做法。 菜菜的我本来很辛苦的摸索了出来这种写法，结果发现目前只有 Safari 和最新版本的 Firefox 可以比较好的支持，这取决于浏览器对 CSS Selector Level 4 的支持程度（Safari 91% 支持，而 Chrome 只有 88%，这个特性恰好在这不支持的 3% 里）。 简单来说就是 :not 里嵌套兄弟选192择器 ~： .order-2 &gt; :not(.controller ~ .card):hover transform: translateY(-5px) box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1) -webkit-transform: translateY(-5px) -webkit-box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1) 很好理解，这个选择器会选择兄弟不为 .controller 的 .card，这样只需要这一个语句即可。 关于这一特性的详细可以看 W3C Editor’s Draft 和 CSS4 Selectors，另附 Can I use 兼容情况。 题图 最后我们添加题图放大的动效，这里的效果模仿自 Apple 官网的 Newsroom 📰，注意 :hover 的写法，我希望鼠标放在卡片上时就激活（而不仅仅是放在题图上）： style.styl.card:hover .card-image a -webkit-transform: scale(1.03) transform: scale(1.03) // 加入过渡效果 .card .card-image a -webkit-transition: opacity 1s cubic-bezier(0.4, 0, 0.25, 1), -webkit-transform 400ms cubic-bezier(0.4, 0, 0.25, 1),200ms -webkit-filter linear transition: opacity 1s cubic-bezier(0.4, 0, 0.25, 1), transform 400ms cubic-bezier(0.4, 0, 0.25, 1),200ms filter linear 细心的朋友可能会发现，光这样还不完美——图片在变换的过程中会先取消圆角，再恢复圆角，也就是说中间会有一段时间「四角方方」，这是我们不愿意看到的，解决方法也很简单，再添加一个 0 度的旋转[5]即可： // 修复变换时的圆角 .card-image transform: rotate(0deg) -webkit-transform: rotate(0deg) 在黑暗模式下我还加入了题图变暗的效果。关于黑暗模式我会在之后详解，就不在本文中赘述了： -webkit-filter: brightness(70%) filter:brightness(70%) 至此，我们便完成了一个用户友好的卡片设计，它整张卡片可点击，且有合适的动效互动，但这并不是 Candy 主题的全部，还有很多细节性的动效就不在这里赘述了，感兴趣的话可以去查看 style.styl 源码。 「跟着走」的导航栏，贴心而不恼人 最后，我想我需要一个会跟随页面的导航栏，它得是贴心的——当你需要它的时候，比如回首页、切换浅色/深色模式、搜索，它就在那里；它还得是不恼人的——它不应该遮挡太多，影响到正文或视觉平衡，它得是灵巧的，且更好的适配响应式设计。 跟着走？No！它只是固定在那里 导航栏不会真的跟着走的，我们只是给它添加一个 position 为 fixed的样式。这么做的同时还需要调整 width 为 100% 并将下一个元素 section 下移： .navbar-main position: fixed !important width: 100% !important top: 0px .section margin-top: 45px 当然，也可以采用 sticky 不过兼容性会差一些，在此案例中效果是一样的。使用 sticky 就不需要设置 section 的下移，不过需要设置 top 属性： .navbar-main position: sticky !important position: -webkit-sticky !important top: 0px 「瘦身」+「毛玻璃」，让导航栏灵巧一些 接下来我想让导航栏看起来更轻巧一些，于是缩窄了导航栏的高度并加入了所谓「毛玻璃」效果。 「瘦身」 通过修改 navbar-item 的内外边距来缩窄高度： .navbar-item margin: 4px !important padding: 8.5px !important 同时 Icarus 原版对于移动端的处理是将 logo 放在一个自适应的 div 里，当屏幕宽度小于 1088 px 的时候，导航栏会分成上下两行。 但这对于一个一直固定在顶端的导航栏来说太大了，所以这里我做了个修改，将自适应去掉，把 logo 也放在 navbar-menu 里： layout/common/navbar.jsx- &lt;div class=&quot;navbar-brand justify-content-center&quot;&gt; - &lt;a class=&quot;navbar-item navbar-logo&quot; href={siteUrl}&gt;{navbarLogo}&lt;/a&gt; - &lt;/div&gt; &lt;div class=&quot;navbar-menu&quot;&gt; + &lt;a class=&quot;navbar-item navbar-logo&quot; href={siteUrl}&gt;{navbarLogo}&lt;/a&gt; ... &lt;/div&gt; 效果图： 当然，还有些更好的方案，比如制作下拉菜单栏，以解决导航栏里的标签页太多超出屏幕宽度的问题，可以见这个旧版本的 PR。有空的时候我会改进导航栏，如果真的有人看的话。 「毛玻璃」 所谓「毛玻璃」，更专业一点的说法叫「Backdrop Filter effect」，即背景过滤效果。所以核心就是 backdrop-filter 样式。我这里依旧模仿的 Apple Newsroom，将 navbar 背景色变透明并增加饱和度和模糊： .navbar -webkit-backdrop-filter: saturate(180%) blur(20px) backdrop-filter: saturate(180%) blur(20px) background-color: rgba(255,255,255,0.7) !important //黑暗模式下颜色为 rgba(29,29,31,0.7) 再将 navbar-menu 背景设为透明，这样小尺寸屏幕下也能正常显示： .navbar-main .navbar-menu background-color: transparent 效果图： 最后，修复锚元素定位 我们固定了导航栏，紧接着问题就来了。你会发现之前的页内锚元素跳转全都错位了（比如目录、脚注），更准确的来说是正好被现在的导航栏所遮挡，所以我们要来修复这个 bug。 脚注修复 先来修复简单的，修复脚注我们只需要用到 CSS（因为新版目录是用 JavaScript 来控制 href 属性值的，这个方法就不行了)，这里我们用到一个小技巧，即用 :target 去定位目标元素，并用 ::before 在前面加一个空的行内元素，然后通过 padding-top 和 margin-top 配合来控制位置这样就修复了正文到脚注的跳转错位： :target::before content: &quot;&quot; display: inline-block padding-top: 73px margin-top: -73px 稍微解释一下，这里就是先用 padding-top 将这个空的 inline-block 移动到距离其容器上方 N px 的位置，然后通过 margin-top 将这个容器整体上移 N px 的位置，这样我们就可以通过调整 N 的值来控制元素的位置。 同理，我们还需要修复下脚注到正文的跳转： .footnote-item::before display: block padding-top: 55px margin-top: -55px margin-bottom: -25px 这里有一些细微的差别，因为脚注是一个列表，列表的元素应该按一整条一整条来看，所以我们把 display 改为 block，再按照之前的方法适当调整一下距离，最后我们还需要通过 margin-bottom 来对齐文本和序号。 目录修复 如果你不需要一个「随着滚动到不同位置，动态折叠展开」的目录，你可以使用这个旧版本的 toc.js，并且采用上面修复脚注的方式来修复错位，这里我就不赘述了。 如果你需要这样一个「智能」的目录，请采用最新版本的 toc.js 并把它放在 source/js 里，这里我只说下对于错位的修复。 首先在 source/js/toc.js 中创建一个 scrollTo 方法来代替不支持偏移量的 scrollIntoView 方法： function scrollTo(id) { var element = document.getElementById(id); var headerOffset = -20; // 偏移量 var elementPosition = element.offsetTop; var offsetPosition = elementPosition - headerOffset; document.documentElement.scrollTop = offsetPosition; document.body.scrollTop = offsetPosition; // 适配 Safari } 没有什么可说的，非常好理解，然后在下面替换即可： if (typeof $heading.scrollTo === 'function') { - $heading.scrollIntoView({ behavior: 'smooth' }); + scrollTo($heading.id); } 就是这么简单，我们完成了所有错位修复。 写在最后的、其他的一些玩意儿 感谢你看到这里，零基础的我可能比较啰嗦，这当然不是我在视觉和交互上做出的全部修改，尽量挑了些对我来说比较有代表性的「坑」，大佬们见笑了。一些细枝末节的修改，网络上可能已经有无数篇相同的文章教你如何去操作了，我就不费口舌了。当然如果你有任何疑问、评价或想教我做事儿，也请不要吝啬，请在文末的评论区给我留言，我会第一时间回复。 这是 Candy 主题修改系列的第一篇，应该也是最零碎的一篇，我非常迫不及待地想分享关于黑暗模式的实现，但是先忍住，下一篇将会是关于 Twikoo 的，一个非常崭新的评论系统，美观、安全、易用、免登录、免费等等，虽然它还有很长的路要走，但目前配得上这些美好的词汇。希望我能在官方作者写出详细教程之前发布（逃）。 本文完。 原创封面图，使用需授权，请勿盗用 脚注 Icarus 主题的 GitHub 仓库主页 ↩︎ .wrap( wrappingElement ): Wrap an HTML structure around each element in the set of matched elements. ↩︎ Stylus 是富于表现力、健壮、功能丰富的 CSS 预处理器，详见官网。 ↩︎ 再谈 CSS 预处理器｜变量作用域 - Justineo ↩︎ 图片transform其父级的border-radius失效 - 沈志勇说 ↩︎","link":"/post/icarus_to_candy_1/"},{"title":"Keysmith：录制并重现你的操作","text":"本文首发于少数派 👉 Keysmith：录制并重现你的操作，为 macOS 自动化带来更多可能 这里是 Setapp 应用介绍补完计划，该计划将收录 Setapp 上好用但还没被介绍的应用。 熟悉 macOS 的少数派们对于系统自带的 Automator「自动操作」一定不陌生。正如它的名字，Automator 允许用户在 macOS 上基于部分第一方应用或支持的第三方应用创建各种自动操作流程。作为一款隐藏的比较深的神器，少数派的作者们也挖掘出了很多「奇技淫巧」。 Automator 的操作类似加强版的 iOS「快捷指令」，采用模块化或录制的方式构建工作流程，不过有一定学习成本且支持的应用比较少。 本文要介绍的是一款更为简单直观，任何人都可以轻松上手的自动化软件——Keysmith。 特性一览👇： 录制你的工作流，并用快捷键自动化复现 支持录制本地应用和网页的操作 可以调用 AppleScript 并与第三方联动 具有「聚焦搜索」风格的快速启动器 采用 Swift 语言编写，是使用起来无比丝滑的 macOS 原生应用 全面拥抱「录制」带来的轻巧感 Keysmith 描述自己为「创建自定义快捷键」，实在是有些谦虚，看似简单的功能其实给了用户很大的想象空间。 与 Automator 相反，Keysmith 的设计十分克制，你并不可以凭空添加自动化动作，一切动作都始于你的「录制」。也正因这份克制，Keysmith 拥有十分简洁的界面。 人人上手就会的基本操作 新建一条 Macro 宏，你便可以点击右上角的「Record」按钮开始录制动作了。录制的过程中，Keysmith 会缩放到右上角并变成记录板，你可以在上面看到当前输入的动作和历史记录。录制好后只需点击「Stop recording」即可保存录制动作成宏指令。 录制完成后你也可以对录制好的动作进行微调，修改、删除或添加动作。在动作流中点击要修改的动作即可键入修改；点击动作右边的「More」按钮来删除或添加动作。支持添加的动作包括「键入文本」、「按压键位」、「点击元素」、「等待」、「运行 AppleScript」和「运行 Keysmith 宏指令」。没错，Keysmith 是可以「套娃」的。 接下来，你可以给你录制的宏指令命名（支持 Emoji）并设置快捷键和生效位置。 Keysmith 的快捷键设置支持无限长的修饰键 + 单个其他键的组合，如果愿意你也可以将单键设置为宏指令的快捷键（不过会弹出警告⚠️，因为这意味着每次按到那个键都会运行宏指令）。 有些快捷键你希望全局生效，比如通过快捷键打开某些软件；而针对某一软件内的具体操作，更合适的做法是只在这一软件内生效。Keysmith 支持**自定义指令生效的位置，**全局、指定应用都可以，你可以很方便地给常用的软件们分别添加个性化的自动操作，大大提高了 Keysmith 功能的可塑性。 完成这些操作后，你就可以按下之前设置的快捷键激活你的自动化宏指令了。 由于 Keysmith 会在前台复现你录制好的动作，在指令运行的过程中最好不要键入或点击，以免干扰到自动化正常运作。 如有需要，可以在设置中勾选开机启动或设置软件快捷键如「快速记录动作」、「运行上一次的宏指令」、云同步等。 总结下整个流程：新建 - 录制 - 设定快捷键等信息 - 运行，仅需 4 步、短短几秒就可以实现一键处理那些繁琐的操作流程。在这个忙碌的时代，「快」是 KeySmith 的核心竞争力之一。 举个例子 下面随手举个简单的实例说明下，我现在希望实现一个快捷操作：打开音乐 app - 开启「秒选随机播放」- 关闭音乐 app 窗体。 不要一上来就啪啪啪一阵乱点，我们应当首先思考确认每一步要操作什么，避免重复录制，比如： 打开音乐 app：我将点击程序坞里的音乐 app 图标，因为我平常将它固定在我 Dock 栏的固定位置。 开启「妙选随机播放」：我可能并不会首选按住 ⌥ Option 并点击播放键边上的按钮的方式，而会采用**点击顶部菜单栏中的「控制」选单，然后点击「妙选随机播放」**或使用快捷键 ⌥ Option + 空格（如果该快捷键没有被占用的话）。 关闭音乐 app 窗体：我可能会首选 ⌘ Cmd + w 关闭窗体。 如此操作有些其实是冗余的，这里例举出来只是为了给大部分自动化场景一个参考，让它们适用且稳定可靠，在后文中「注意事项和小贴士」板块会详细介绍这一点。 思考好流程后就十分简单了，新建、录制后走一遍流程，最后绑定快捷键就成功了🎉。 其实我们可以将第一步的「in Dock」操作删除，只留「Open 音乐」也会正常打开 app，如遇到无法识别的应用，也可以手动指定路径；在这个案例中，鼠标操作或是键盘快捷键都是可以正常识别的，所以最终简化版如下： 按下自定义的 ⇧ Shift + ⌘ Cmd + M 尝试一下： 是不是十分方便快捷？当然你还可以制作更简单的操作，比如给常用的应用添加快速启动快捷键等等；你也可以制作更复杂的操作，比如…… 我们接着往后看： 不仅操控本地，也能操控云端 是的，Keysmith 还支持制作操控网页的自动化宏指令，这需要我们安装对应的浏览器插件。目前，Keysmith 支持 Chrome 和 Firefox 浏览器，你可以在初始化设置时安装或前往浏览器应用商城自行安装。 这样，Keysmith 就可以根据 Chrome 浏览器中的网页响应和 DOM 结构来制作基于网页的自动化流程了。比如下图就演示了在少数派首页查看「关注」标签页的例子，可以看到有一个「Wait for the page to load」即等待页面加载，这是由你录制时候的行为决定的。如果你在录制的时候等待网页完全加载了，那么在动作中也会记录下这一倾向。 对于 &lt;li&gt; 标签的列表结构，Keysmith 还支持点选列表首位或末位元素。 锦上添花，与第三方联动 你可能注意到了 Keysmith 支持在动作中添加 AppleScript 和用户已创建的 Keysmith 指令，脚本和「套娃」的支持极大地扩展了 Keysmith 的上线，你可以在少数派中查看「AppleScript」相关文章 学习脚本的编写。 除此之外，我还想再提一个让苹果效率用户快乐的词——URL Schemes。简单来说，URL Schemes 是可以链接到软件内部的链接，第三方软件可以通过它跳转到某一软件或调用其功能，关于「URL Schemes」少数派中也有大佬做过 详细介绍 。 Keysmith 中每一条指令都有其对应的 URL Schemes。右键创建好的宏指令，点击「Copy Macro URL」即可复制形如 keysmith://run-macro/F1FCD7CD-E276-4C87-848F-12F3CB8D5878 的 URL Schemes。 带上链接去创造吧 接下来你就可以用 URL Schemes 去和脍炙人口的效率工具们联动了，比如同在 Setapp 里的 BetterTouchTool 以及 Alfred、Keyboard Maestro 等，相信你能探索出更多玩法。 另外官方 博客 中还提供了在不同平台和编程语言中使用 URL Schemes 的教程供你参考。 注意事项、小贴士和其他问题 除了上面提到的「运行时尽量不要操作」外，你可能还需要关注以下几件事👇。 不可忽视的录制技巧 你应该发现了，Keysmith 的设计理念其实和 Automator 并不相同——前者强调实际的点击或键入，是可视的、是在「明处」的；而后者则强调流程和步骤的输入输出，大多数情况可以是不可视的、是在「暗处」的。 意识到这一点在实际使用中是十分重要的，这意味着我们录制动作时需要考虑到不同场景下的「可复用性」，下面是一些坑： 建议使用更普适的动作和路径，比如尽量直接使用「Open 某 App」 的动作或点击程序坞中的固定图标、通过终端命令行打开文件或文件夹等，其次是通过 Spotlight 或启动台打开，这样可以避免出现可能的定位错误或依附于无法录入的滑动操作等情况； 优先选择最先加载出来的左上角菜单栏，其次是键盘快捷键最后是鼠标点击，这是因为键盘快捷键和左上角菜单栏的设定很固定、很少做改动且生效很快，保证了自动化的鲁棒性； 当使用网页自动化的时候，需要注意 Keysmith 是无法辨别多个相同元素的，比如少数派首页的「一派」和「Matrix 精选」都有「查看全部」按钮，Keysmith 就不知道该点哪个了，这时只能使用点击某固定点的方式了； 使用「点击元素」这个功能时要好好考虑，因为当你点击的地方没有检测到可点击控件或结构时，它便会点击元素在窗口的相对位置，而很多时候目标元素会随着窗口大小的变化而位移，并没有键盘操作或菜单栏来得可靠。 不过经过大量测试，即使是网页，大部分情况下 KeySmith 都可以很好地识别控件或 DOM 结构，你只需要留意操作过程中识别是否正常即可。 不知道要弄些啥？来看看官方的案例参考 如果你不知道该用 Keysmith 做些什么，官方网站有不少 案例 也许可以给你带来一些灵感。 官方将国外一些常见的办公、协作软件作为例子展示了软件的各种特性， GitHub、Google Docs、Slack、Trello、Zoom 等等都是我们所熟悉且可以模仿学习的，最后列举出的 AppleScipt 也很值得参考。 指令太多，快捷键记不住？请使用快速启动器 当我们创建了太多指令后，难免会忘记对应的快捷键，这时只要按下 ⌥ Option + ⌘ Cmd + 空格 即可激活一个很清爽的快速启动器，不得不说作者想的很周到。当你通过快速启动器搜索、点选你想要的指令后，无需跳转到 Keysmith 便可执行指令。 我是 Keyboard Maestro 用户，Keysmith 和它有什么区别？ 我知道，Keyboard Maestro 用户看本文可能急死了，Automator 开头都提了，更加强悍的 Keyboard Maestro 呢？！是的，Keyboard Maestro 作为老牌效率软件口碑很好、很棒、很强大，两款相似又好用的工具难免被拉来做对比，具体区别就不在本文赘述了。简单来说，Keyboard Maestro 确实拥有更多的复杂功能 ，但 Keysmith 更加简洁，更加面向大众。对此 Keysmith 官方打了个也许不是那么恰当的比喻👇。 If using Keyboard Maestro is like driving a stick shift, using Keysmith is like driving an automatic. Both are fine choices – it’s largely a matter of personal preference. 感兴趣的可以看看官方的 对比博文 。 获取方式与价格 你可以在订阅制应用商城 Setapp 中 获取它 ，或在 官网 购买 29 美元的单设备许可证（目前只支持银行卡支付）。 WeMod 世界上最好的游戏修改器合集 w 免费 .steam-icon{background-color:#171a21;color:white} .stardock-icon{background-color:#014b8d;fill:white;} .taobao-icon{background-color:#fe8600;} .dark .fences-icon{background-color: #1d1d1f} .fences-icon{background-color: white} .fences-icon{padding:7px !important;display: flex; align-items: center;} .fences-icon img{border-radius: 0px !important;vertical-align:middle;object-fit: initial !important; height: auto !important;} 以上就是关于 Keysmith 的介绍，它是 2020 年下半年刚出的一款「新生儿」软件，这个时代渐渐拥抱极简，相信它可以做的越来越好。当我在 Setapp 里第一次看到它，便被它的创意吸引，期待它可以支持更复杂的逻辑。我认为 Keysmith 的威力不止于此，本文只是抛砖引玉，期待大家挖掘出更多新奇的玩法。 Keysmith 为你的 Mac 和网络创建自定义键盘快捷键 S ⌘ $ 29 .steam-icon{background-color:#171a21;color:white} .stardock-icon{background-color:#014b8d;fill:white;} .taobao-icon{background-color:#fe8600;} .dark .fences-icon{background-color: #1d1d1f} .fences-icon{background-color: white} .fences-icon{padding:7px !important;display: flex; align-items: center;} .fences-icon img{border-radius: 0px !important;vertical-align:middle;object-fit: initial !important; height: auto !important;}","link":"/post/macOS_setapp_keysmith/"},{"title":"WeMod：世界上最好用的单机游戏修改器","text":"本文首发于少数派 👉 世界上最好用的单机游戏修改器——WeMod 修改不了人生，但你可以修改游戏。 游戏修改器，属于 PC 玩家的「地下王国」 做为一名单机游戏玩家，你一定遇到过以下场景： 这款游戏太难了，而我只想体验剧情 xxsss这条任务太烦了，而我并没有那么多时间去刷 这个角色太菜了，而我想让他「上天入地」、子弹无限、技能无冷却等 …… 也许你在游玩《赛博朋克 2077》的这几天就有过这种无力感。 幸运的是，作为一个「PC 党」，最幸福的事莫过于对买到手的单机游戏有完全的支配权。 于是你兴高采烈地搜索「游戏名 + 修改器」，来到那些花里胡哨的门户网站，并熟练地穿过层层广告和诱导陷阱，下载了由「风灵月影」大大制作的「XX项修改器」。 大多数情况下修改器非常好用，下载过程中捆绑的软件也并不能影响到「久经沙场」的你。直到你发现电脑中堆满了这个图标👇： 这时你才开始思考一个问题：还有更「优雅」的解法吗？ 能用，但是不够「优雅」。相信「风灵月影」大大本人也是这么想的，于是制作了自己修改器的 集合版本 ，但它有着「安装过程捆绑软件」、「太多无关内容和广告」、「没适配高分屏」等几宗罪，所以本文的主角并不是它。 本文要介绍的是一款具有现代化设计的修改器整合软件——WeMod。这款软件「优雅」的同时可谓是「降维打击」。对于喜欢修改游戏的玩家来说，我相信「用了便回不去了」。 一切关于游戏，一切为了玩家 简洁的启动体验 WeMod 非常干净简洁，且安装包只有 100 多 KB，从 官网 下载至安装、使用的过程中，也没有一丝广告和捆绑软件。 初次打开软件后别被登陆框所吓到，直接点击右下角的「Continue with New Account」便会帮你创建一个账号并进入主页，整个过程无需输入任何信息，非常快捷。新账号会附赠 100 WePoints 点数，点数的作用将在后文介绍。（如果要保存点数或参与社区讨论等，你可以之后在设置中绑定邮箱。） WeMod 的设计简洁大气。首先印入眼帘的便是时下热门游戏的轮播图，右下角的「活动」会显示修改器们的更新时间轴，完成右上角的「目标」可以赚取 WePoints 点数。 超过千款游戏支持 WeMod 目前支持超过千款热门游戏，且每周都会追加游戏列表。由于很多修改器原作者都入驻了，所以修改器内容更新也是最全最及时的。千款游戏听起来不多，但其实已经涵盖了主流热门游戏（供参考，「风灵月影」大大共制作了 700 多款修改器），至少在我使用过程没有出现想要的游戏没有对应修改器的尴尬情况。 你可以在 官网 查看并检索游戏支持情况 自动游戏检测 WeMod 将会自动检测你库中的游戏，并适配对应版本的修改器。支持自动识别 Steam、Epic、Windows Store、Uplay、Origin 等主流平台。 检测到的游戏将出现在「游戏库」标签页的左侧，它会按照「兼容」、「可能兼容」、「不兼容」来分区（目前我的「不兼容」分区里是空的）。你还可以将喜爱的游戏放入游戏收藏夹，它会显示在列表最顶端，就像本图中的《看门狗：军团》。 同时在右侧会显示「最近玩过」、「新游戏」和「人气游戏」。 多样化的版本支持 你可能注意到上图的「人气游戏」板块，《赛博朋克 2077》出现了两次，这是因为 WeMod 上修改器是分平台的！也就是说你不必担心，不同平台的游戏版本差异导致修改器不能正常工作，WeMod 已经贴心地帮你处理好了这些。 不仅如此，WeMod 还会对不同图形接口进行适配，比如《控制（Control）》就分了DirectX 11 和 DirectX 12 两个版本。 可以说，WeMod 为了让你安心地使用修改器，下足了功夫。 直观且丰富的修改器控制界面 修改器本体 终于进入到「主菜」了！其实修改器是一种功能导向性软件，而且大部分时间在后台运行，即用即扔。这就意味着，如果核心功能不能打，「配菜」再怎么花里胡哨也无济于事。 那么 WeMod 的修改器部分到底能不能打呢？当然能。我们还是拿《赛博朋克 2077》为例。 可以看到针对《赛博朋克 2077》，修改器按照「玩家」、「物品栏」、「统计数据」、「武器」、「敌人」、「游戏」六个板块进行了分类，左侧文字是功能描述，右侧的键位则是激活功能的快捷键，总计 32 种可修改功能，给足了玩家「骚操作」的空间。其他的游戏也都是如此，会按照板块分类，提供丰富功能的同时也实现了排版上的清晰。 更令人喜爱的小功能是，你可以通过点击右侧的键位更改成自己想要的快捷键，这是大部分修改器所不能做到的。 那如何开始使用修改器呢？只需点击右上角的「开始游戏」，即可通过键盘快捷键来激活修改器的功能。 你可能注意到上述截图中的很多修改器作者名都是「FLiNG」，且《赛博朋克 2077》的修改器和最开始的截图功能一致，也是「三十二项」的。对，没错，「FLiNG」就是「风灵月影」本人，他在今年十月底正式加入了 WeMod 团队。同时有很多类似的开发者大大也加入了 WeMod 团队，所以你无需担心修改器的质量或功能数量问题，WeMod 平台绝对是更新最及时、功能最全的。 「注释」、「讨论」、「历史记录」 在修改器的右侧，你可以看到「讨论」和「历史记录」板块，可能也会有「注释」板块。这也是 WeMod 的特色功能。「注释」、「讨论」、「历史记录」分别起到了「使用提醒」、「社区讨论」和「版本管理」的作用。 举例说明，比如《看门狗：军团》这款游戏，由于 Uplay 平台有 BattlEye 反作弊保护，要使用修改器需在启动器中添加参数来禁用 BattlEye。这段描述就被写在了看门狗修改器右侧的「注释」中。 点击「讨论」则会跳转到修改器的对应论坛页，你可以在上面看到详细的介绍、演示或重要事项，以及按时间线排序的开放讨论区。 而点击「历史记录」，则可以看到指定修改器的更新历史，最强悍的地方就在于，这份时间线是可以随意切换的，你可以通过点击历史版本手动调回旧版本。 关于鼠标激活和多语言的一些问题 说了这么多修改器的优点，但其实还是有些小「缺陷」的。 免费用户无法通过鼠标点击激活功能，不过一般修改器是后台使用，就我个人而言影响不大。 如你所见，目前修改器功能介绍并没有支持中文，然而修改器对应的都是游戏中的简单英语，对大部分用户也不影响使用。 对于前一个问题，如果非常在意，可以通过升级 Pro 用户来解决；对于功能汉化问题，其实无需担心，官方已经在有意推行着多语言翻译问题，比如界面的「简体中文」支持是最新版本才更新的，而修改器、新闻等更多的中文翻译，官方承诺将采用社区翻译的方式上线，相信很快就可以解决。 活跃且健康的社区 WeMod 维护着一个活跃且健康的 社区 ，社区的讨论氛围好、专注制作修改器的大佬也多。 除了现有的修改器，每一个 WeMod 用户也可以「请求」新游戏修改器上线或修改器更新。通过完成「目标」获得的 WePoints 点数来兑换「代币」即可给心仪的游戏「投票」。（兑换比例 250 比 1，Pro 用户每月可获得 5 代币） 看不见但很重要的安全问题 国产修改器最让人诟病的莫过于，被黑心商人「二次包装」。用广告或捆绑软件恶心人还算好，天晓得会不会植入什么病毒，本来想修改游戏，结果把电脑给「修改」了就不好了。 然而使用 WeMod 就完全不需要担心这种问题。一是有大量用户长时间使用，且社区活跃，有什么问题也可能会被及时发现。二是官方也提供了完整的病毒检测报告，感兴趣的话可以在 VirusTotal 查看报告详情。 到此为止，便是 WeMod 免费用户的全部功能，可以说是完全够用了，下面将介绍付费功能。 如果富裕，可以升级至专业版支持他们 这么良心的软件，他们通过什么方式赚钱？ 用户充值 WePoints 点数或「代币」来给请求的游戏投票 订阅制的专业版（Pro）会员 下图非常清晰的展示了专业版到底多了哪些功能： 可以看到 WeMod 专业版里最「重量级」的功能其实是通过手机来「远程控制」修改器。这是一个非常方便的功能，相当于给了一个直观的外置控制面板，你无需去记忆快捷键位也无需切出，只需要在手机上动动手指就可以远程控制修改器，提高了游戏的沉浸感和体验。此 App 支持 iOS 和安卓。 剩下的功能，「鼠标控制」、「更多投票数」和「更多主题色」其实是比较无关痛痒的。专业版月费 7.99 美元，年付月费 5 美元，支持银行卡和 PayPal 支付。价格不低，维护社区不易，升级就权当支持 WeMod 团队了。 哦对了，其实你也可以通过「邀请朋友」来获得 1 周的专业版会员资格。 最后，WeMod 官网是这么介绍自己的👇（广告法警告⚠️） WeMod is the world’s best application for modding hundreds of single-player PC games. 重新回顾 WeMod：干净简洁的用户体验和设计、既多样又人性化的整合形式与使用方法、修改器领域独一无二的社区文化、时刻保持功能创新、内容质量良心的免费版…… 嗯，我想 WeMod 它确实如此「best」，当之无愧。 WeMod 世界上最好的游戏修改器合集 w 免费 .steam-icon{background-color:#171a21;color:white} .stardock-icon{background-color:#014b8d;fill:white;} .taobao-icon{background-color:#fe8600;} .dark .fences-icon{background-color: #1d1d1f} .fences-icon{background-color: white} .fences-icon{padding:7px !important;display: flex; align-items: center;} .fences-icon img{border-radius: 0px !important;vertical-align:middle;object-fit: initial !important; height: auto !important;}","link":"/post/windows_wemod/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"博客主题","slug":"博客主题","link":"/tags/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"软件推荐","slug":"软件推荐","link":"/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"},{"name":"效率","slug":"效率","link":"/tags/%E6%95%88%E7%8E%87/"},{"name":"信息管理","slug":"信息管理","link":"/tags/%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86/"},{"name":"交互设计","slug":"交互设计","link":"/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"Setapp","slug":"Setapp","link":"/tags/Setapp/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"}],"categories":[{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"一言","slug":"一言","link":"/categories/%E4%B8%80%E8%A8%80/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"}]}