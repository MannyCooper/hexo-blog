<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安子璠的个人主页</title>
  <icon>https://anzifan.com/icon.png</icon>
  
  <link href="https://anzifan.com/atom.xml" rel="self"/>
  
  <link href="https://anzifan.com/"/>
  <updated>2020-12-08T13:45:28.306Z</updated>
  <id>https://anzifan.com/</id>
  
  <author>
    <name>安子璠</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创造 CANDY 主题，只为更好的交互</title>
    <link href="https://anzifan.com/post/icarus_to_candy_1/"/>
    <id>https://anzifan.com/post/icarus_to_candy_1/</id>
    <published>2020-11-18T22:00:00.000Z</published>
    <updated>2020-12-08T13:45:28.306Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info">   <div class="message-header">  <i class="fas fa-info-circle mr-2"></i>   <p>📚本系列文章，将分成四个板块更新</p>  </div>   <div class="message-body"> <ol><li><a href="/post/icarus_to_candy_1/"><strong>基础设计修改</strong></a>  <span class="icon has-text-success">  <i class="fas fa-check-square"></i></span></li><li>配置 Twikoo 评论</li><li>增加深色模式支持</li><li>其他细节与模块</li></ol></d/iv> </article><style>.message-header {  justify-content: start !important;}  .message.is-info{    width: 50%;float: right;margin-left: 20px;    margin-bottom: 11px !important;  }  @media screen and (max-width: 768px){    .message.is-info{    width: 100%;float: none;margin-left: 0;  }  }</style><p>众所周知，Icarus<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 是一个非常优秀的 Hexo 主题。它不仅提供清爽、简洁的界面，还与各种主流插件、组件兼容的很好。更令人欣喜的是——它几乎是最活跃的 Hexo 主题之一，有着非常良好的社区氛围。作者时刻保持更新，并提供了非常完善的文档。</p><p>种种因素使我最终选择了它，并准备在其基础上修改出自己满意的设计，我将其命名为 <strong>Candy</strong>，并将在 <a href="https://github.com/MannyCooper/hexo-theme-candy">GitHub</a> 上与 Icarus 保持更新。本文将是这一系列文章的第一节——基础设计修改。</p><article class="message message-immersive is-warning">  <div class="message-body">    <i class="fas fa-exclamation-triangle"></i>    本人前端零基础，如有不妥，请在<a href="#twikoo">评论区</a>教我做事，谢谢🙏  </div></article><h2 id="真正的卡片式设计——让最频繁的交互更人性化">真正的卡片式设计——让最频繁的交互更人性化</h2><h3 id="分析">分析</h3><p>Icarus 主题很美观，但对我来说它与许多 Hexo 主题一样都存在一个核心问题，即首页的文章如需访问全文，需要点击 <code>Read More</code> 按钮、图片或标题才可以进入，而点击主文字或卡片空白处是没有反应的，恰好很多博主喜欢把摘要写成长篇大论，此时的 <code>Read More</code> 按钮看起来更小，很容易被忽视，点击大段文字也许是很多读者的第一反应，虽然这并不会得到任何回应。</p><picture>    <source srcset="https://static.anzifan.com/uPic/1_long_abstract_dark.png" media="(prefers-color-scheme: dark)">    <source srcset="https://static.anzifan.com/uPic/1_long_abstract.png" media="(prefers-color-scheme: light)">    <img class="adapt" src="https://static.anzifan.com/uPic/1_long_abstract.png" alt="大佬们的博客，长长的「摘要」使 Read More 按钮显得特别小"></picture><p><strong>点击、进入全文，这应该是每个博客最频繁的交互。</strong>尴尬的小按钮难免给读者造成一些细微的障碍，当然如果对自己的内容足够自信，或者没那么讲究的话，你就可以跳过这一节了。</p><h3 id="尝试">尝试</h3><p>为了达成真正的卡片效果，我探索过一些方法。</p><p>我的第一反应是在 <code>&lt;article&gt;</code> 标签外套一层 <code>&lt;a&gt;</code> 标签然后设置 <code>href</code> 属性，同时 <code>&lt;article&gt;</code> 要设置成块级元素。于是我便在 <code>layout/common/article.jsx</code> 中这样修改：</p><pre><div class="caption"><span>layout/common/article.jsx</span></div><code class="hljs jsx">&lt;a <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;card-link&quot;</span> href=&#123;index ? url_for(page.link || page.path):<span class="hljs-literal">null</span>&#125;&gt;  &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=&#123;<span class="hljs-string">`card-content article<span class="hljs-subst">$&#123;<span class="hljs-string">&#x27;direction&#x27;</span> <span class="hljs-keyword">in</span> page ? <span class="hljs-string">&#x27; &#x27;</span> + page.direction : <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>`</span>&#125; role=<span class="hljs-string">&quot;article&quot;</span>&gt;  ...  &lt;/article&gt;&lt;/a&gt;</code></pre><p>感觉非常合理，但其实并不行，如果这样操作，在实际页面中，<code>&lt;a&gt;</code> 标签并不会正确包裹，反而会被添加到 <code>&lt;article&gt;</code> 元素下每个子元素的首位。我并不确定是什么原因，但是根据 Stack Overflow 上的一篇<a href="https://stackoverflow.com/questions/38367002/make-entire-article-tag-a-link/38367067#38367067">回答</a>中的评论：</p><blockquote><p>You should really point out (by suggesting this way) that: using this solution you <strong>cannot have other Anchor elements inside the article</strong>. – <a href="https://stackoverflow.com/users/383904/roko-c-buljan">Roko C. Buljan</a> <a href="https://stackoverflow.com/questions/38367002/make-entire-article-tag-a-link/38367067#comment64146037_38367067">Jul 14 '16 at 6:51</a></p></blockquote><p>貌似如果想这样操作的话，子元素不能再有其他 <code>&lt;a&gt;</code> 元素。我便以为是不可以的，当时就作罢了。</p><p>接下来，我尝试在外面先套一层 <code>&lt;object&gt;</code> 标签，再套 <code>&lt;a&gt;</code> 标签链接到正文，这样我们就实现了整张卡片可点击的效果。</p><pre><div class="caption"><span>layout/common/article.jsx</span></div><code class="hljs jsx">&lt;a <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;card-link&quot;</span> href=&#123;index ? url_for(page.link || page.path) : <span class="hljs-literal">null</span>&#125;&gt;  &lt;object <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;card-object&quot;</span>&gt;    &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=&#123;<span class="hljs-string">`card-content article<span class="hljs-subst">$&#123;<span class="hljs-string">&#x27;direction&#x27;</span> <span class="hljs-keyword">in</span> page ? <span class="hljs-string">&#x27; &#x27;</span> + page.direction : <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>`</span>&#125; role=<span class="hljs-string">&quot;article&quot;</span>&gt;      ...    &lt;/article&gt;  &lt;/object&gt;&lt;/a&gt;</code></pre><p>这样确实可以了，本来这一段到这里就结束了，但我想起了<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/object">文档</a>里对 <code>&lt;object&gt;</code> 标签的描述：</p><blockquote><p><strong>HTML <code>&lt;object&gt;</code> 元素</strong>（或者称作 <em>HTML 嵌入对象元素</em>）表示引入一个<strong>外部资源</strong>，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。</p></blockquote><p>啊这，有一丝隐隐的不安<img class="not-gallery-item" src="https://static.anzifan.com/uPic/1_meme_cat_think.jpeg" style="width:28px;" />。迅速查了下 SEO，发现目前 Google 是会索引 <code>object</code> 元素的，但心里就是不舒服，毕竟不太符合语义。</p><p>于是乎，就换来了接下来的方法，也是最终的实现方法。</p><h3 id="解法">解法</h3><p>这种方法的思路其实和第一种是一致的，但是具体实现有区别，这次我们不在 <code>article.jsx</code> 里修改了，直接在 <code>source/js/main.js</code> 最底下添加：</p><pre><code class="hljs js"><span class="hljs-keyword">if</span> ($(<span class="hljs-string">&#x27;.article-licensing.box&#x27;</span>).length === <span class="hljs-number">0</span>)&#123;  $(<span class="hljs-string">&quot;.card-content.article&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    $(<span class="hljs-built_in">this</span>).wrap(<span class="hljs-string">&#x27;&lt;a class=&quot;card-link&quot; href=&quot;&#x27;</span> + $(<span class="hljs-built_in">this</span>).find(<span class="hljs-string">&#x27;h1 a&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>) + <span class="hljs-string">&#x27;&quot;&gt;&lt;/a&gt;&#x27;</span>);  &#125;)&#125;</code></pre><p>其实就是用了 jQuery 的 <code>warp()</code> 方法<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，这里我们指定 <code>&lt;a&gt;</code> 元素来包裹 <code>&lt;article&gt;</code> 元素。同时因为我们只需要在首页让这些卡片有链接，所以我们可以通过判断正文末尾的版权信息盒子是否存在，来控制这条语句是否生效。</p><p>我们还需要设置一下 <code>card-link</code> 的 <code>color</code> 为 <code>inherit</code>，这样摘要的颜色就会恢复成白色，否则会是你 <code>a</code> 标签的颜色（自定义 CSS 的方法在后文）：</p><pre><code class="hljs stylus">.card-link    <span class="hljs-attribute">color</span>: inherit</code></pre><p>这样我们就实现了整个卡片可点击，且卡片里原有的分类链接照样可以点击并不受影响。但我并不知道为何第一种和第三种方法会有这样的差异，如果有大佬清楚请在<a href="#twikoo">评论区</a>解答我，谢谢。</p><h2 id="加入一点动效会让体验更好吗？答案是肯定的">加入一点动效会让体验更好吗？答案是肯定的</h2><p>所谓「交互」，代表着交流和互动。一个好的交互设计，组件与用户的互动是必不可少的。互联网厂商们早已发现了这一逻辑，并将这些互动悄悄藏在设计里，通过微小的震动、令人愉悦的变换俘获用户的感官。</p><p>简单来说，光将整张卡片链接到正文还不够，它得是让用户有感知的，这个感知就由动效来实现。</p><p>废话少说，先上效果图👇：</p><div style="text-align: center"><picture>    <source srcset="https://static.anzifan.com/uPic/1_card_dark.gif" media="(prefers-color-scheme: dark)">    <source srcset="https://static.anzifan.com/uPic/1_card_light.gif" media="(prefers-color-scheme: light)">    <img class="adapt" src="https://static.anzifan.com/uPic/1_card_light.gif" alt="动图可能看不太清楚，可自行在本博客体验效果，深色模式和浅色模式下会有细微的差别"></picture></div><p>为实现这个效果，我增加了：</p><ul><li><p>向上的位移</p></li><li><p>阴影的变换</p></li><li><p>题图的变大（深色模式下，还增加了题图的变暗）</p></li></ul><p>我希望能用纯 CSS 解决的，尽量只用 CSS。为了后期与 Icarus 同步更方便，我们修改 <code>source/css</code> 目录下的 <code>style.styl</code> 来自定义样式。Icarus 使用 Stylus<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> 作为 CSS 预处理器。它的定义生效规则是：</p><blockquote><p>一个变量不能影响在定义它以前的输出样式。<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p></blockquote><p>所以为了方便，我们可以把所有自定义样式放在最前面，把 <code>@import</code> 放在最后。</p><h3 id="位移与阴影">位移与阴影</h3><p>首先，我们将位移与阴影一起添加，效果模仿自 <a href="https://gridsome.org/starters/gridsome-blog-starter/">Gridsome Blog Starter</a> 🙏。</p><p>因为我不希望在正文处也出现动效，同时希望尽可能用纯 CSS 解决，所以我在 <code>article.jsx</code> 最前面添加一个只在正文生效的空的 <code>div</code> 元素，并通过 class 名「controller」来控制：</p><pre><div class="caption"><span>article.jsx</span></div><code class="hljs jsx"><span class="hljs-keyword">return</span> &lt;Fragment&gt;  <span class="hljs-comment">// 通过判断 index 是否存在，来决定是否是正文。</span>  &#123;!index ? <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">controller</span>&#x27;&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>: <span class="hljs-literal">null</span>&#125;  ...&lt;/Fragment&gt;</code></pre><p>这样一来，正文的最前面就会多一个空的、class 名为「controller」的 <code>div</code> 元素。接下来我们写伪类：</p><pre><code class="hljs stylus"><span class="hljs-selector-class">.order-2</span> <span class="hljs-selector-class">.card</span>:hover    <span class="hljs-attribute">transform</span>: translateY(-<span class="hljs-number">5px</span>)    box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1)    -webkit-<span class="hljs-attribute">transform</span>: translateY(-<span class="hljs-number">5px</span>)    -webkit-box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1)<span class="hljs-comment">// 将兄弟元素为 .controller 的 .card 的 :hover 样式重制（无效化）</span><span class="hljs-selector-class">.order-2</span> <span class="hljs-selector-class">.controller</span> ~ <span class="hljs-selector-class">.card</span>:hover    <span class="hljs-attribute">transform</span>: none    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">10px</span> rgba(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.05</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1px</span> rgba(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>)    -webkit-<span class="hljs-attribute">transform</span>: none    -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">10px</span> rgba(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.05</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1px</span> rgba(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>)<span class="hljs-comment">// 加入过渡效果</span>.card    <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">0.3s</span> ease-out, transform <span class="hljs-number">0.3s</span> ease-out, box-shadow <span class="hljs-number">0.6s</span> !important</code></pre><p>可以看出来，这样写会有一些啰嗦和冗余，我尝试过一些想法都不太好，比如将 <code>index</code> 判断反写，把「controller」加在首页最上方，但 Icarus 原版的 <code>&lt;Fragment&gt;</code> 元素写法，会在每个卡片上加上一个 <code>div</code> 元素，从而打乱布局，让菜菜的我觉得麻烦<img class="not-gallery-item" src="https://static.anzifan.com/uPic/1_meme_cat_shock.JPG" style="width:28px;" />，所以先就这样，日后再改。</p><p>如果有大佬们有更好的解决方案，请在<a href="#twikoo">评论区</a>赐教。</p><details> <summary><b>点击展开查看</b>：一个现在不兼容，但未来可能可以的做法。</summary><p>菜菜的我本来很辛苦的摸索了出来这种写法，结果发现目前只有 Safari 和最新版本的 Firefox 可以<a href="https://caniuse.com/css-not-sel-list">比较好的支持</a><img class="not-gallery-item" src="https://static.anzifan.com/uPic/1_meme_panda_tired.JPG" style="width:32px;" />，这取决于浏览器对 CSS Selector Level 4 的支持程度（Safari 91% 支持，而 Chrome 只有 88%，这个特性恰好在这不支持的 3% 里）。</p><p>简单来说就是 <code>:not</code> 里嵌套兄弟选192择器 <code>~</code>：</p><pre><code class="hljs stylus"><span class="hljs-selector-class">.order-2</span> &gt; :not(<span class="hljs-selector-class">.controller</span> ~ .card):hover    <span class="hljs-attribute">transform</span>: translateY(-<span class="hljs-number">5px</span>)    box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1)    -webkit-<span class="hljs-attribute">transform</span>: translateY(-<span class="hljs-number">5px</span>)    -webkit-box-shadow: 1px 10px 30px 0 rgba(0,0,0,.1)</code></pre><p>很好理解，这个选择器会选择兄弟不为 <code>.controller</code> 的 <code>.card</code>，这样只需要这一个语句即可。</p><p>关于这一特性的详细可以看 <a href="https://drafts.csswg.org/selectors-4/#negation">W3C Editor’s Draft</a> 和 <a href="https://css4-selectors.com/selector/css4/negation-pseudo-class/">CSS4 Selectors</a>，另附 <a href="https://caniuse.com/css-not-sel-list">Can I use 兼容情况</a>。</p></details><h3 id="题图">题图</h3><p>最后我们添加题图放大的动效，这里的效果模仿自 Apple 官网的 <a href="https://www.apple.com/newsroom/">Newsroom</a> 📰，注意 <code>:hover</code> 的写法，我希望鼠标放在卡片上时就激活（而不仅仅是放在题图上）：</p><pre><div class="caption"><span>style.styl</span></div><code class="hljs stylus"><span class="hljs-selector-class">.card</span>:hover    <span class="hljs-selector-class">.card-image</span> a        -webkit-<span class="hljs-attribute">transform</span>: scale(<span class="hljs-number">1.03</span>)        <span class="hljs-attribute">transform</span>: scale(<span class="hljs-number">1.03</span>)<span class="hljs-comment">// 加入过渡效果</span><span class="hljs-selector-class">.card</span> <span class="hljs-selector-class">.card-image</span> a    -webkit-<span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span> cubic-bezier(<span class="hljs-number">0.4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">1</span>),    -webkit-<span class="hljs-attribute">transform</span> <span class="hljs-number">400ms</span> cubic-bezier(<span class="hljs-number">0.4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">1</span>),<span class="hljs-number">200ms</span> -webkit-filter linear    <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span> cubic-bezier(<span class="hljs-number">0.4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">1</span>),    <span class="hljs-attribute">transform</span> <span class="hljs-number">400ms</span> cubic-bezier(<span class="hljs-number">0.4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">1</span>),<span class="hljs-number">200ms</span> filter linear</code></pre><p>细心的朋友可能会发现，光这样还不完美——图片在变换的过程中会先取消圆角，再恢复圆角，也就是说中间会有一段时间「四角方方」，这是我们不愿意看到的，解决方法也很简单，再添加一个 0 度的旋转<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>即可：</p><pre><code class="hljs stylus"><span class="hljs-comment">// 修复变换时的圆角</span>.card-image    <span class="hljs-attribute">transform</span>: rotate(<span class="hljs-number">0deg</span>)    -webkit-<span class="hljs-attribute">transform</span>: rotate(<span class="hljs-number">0deg</span>)</code></pre><p>在黑暗模式下我还加入了题图变暗的效果。关于黑暗模式我会在之后详解，就不在本文中赘述了：</p><pre><code class="hljs stylus">-webkit-<span class="hljs-attribute">filter</span>: brightness(<span class="hljs-number">70%</span>)<span class="hljs-attribute">filter</span>:brightness(<span class="hljs-number">70%</span>)</code></pre><p>至此，我们便完成了一个用户友好的卡片设计，它整张卡片可点击，且有合适的动效互动，但这并不是 Candy 主题的全部，还有很多细节性的动效就不在这里赘述了，感兴趣的话可以去查看 <a href="https://github.com/MannyCooper/hexo-theme-candy/blob/publish/source/css/style.styl"><code>style.styl</code> 源码</a>。</p><h2 id="「跟着走」的导航栏，贴心而不恼人">「跟着走」的导航栏，贴心而不恼人</h2><p>最后，我想我需要一个会跟随页面的导航栏，它得是贴心的——当你需要它的时候，比如回首页、切换浅色/深色模式、搜索，它就在那里；它还得是不恼人的——它不应该遮挡太多，影响到正文或视觉平衡，它得是灵巧的，且更好的适配响应式设计。</p><h3 id="跟着走？No！它只是固定在那里">跟着走？No！它只是固定在那里</h3><p>导航栏不会真的跟着走的，我们只是给它添加一个 <code>position</code> 为 <code>fixed</code>的样式<img src="https://static.anzifan.com/uPic/1_meme_cat_awesome.jpg" style="zoom:3%;" />。这么做的同时还需要调整 <code>width</code> 为 <code>100%</code> 并将下一个元素 <code>section</code> 下移：</p><pre><code class="hljs stylus">.navbar-main    <span class="hljs-attribute">position</span>: fixed !important    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span> !important    <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>.section    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">45px</span></code></pre><p>当然，也可以采用 <code>sticky</code> 不过兼容性会<a href="https://caniuse.com/?search=sticky">差一些</a>，在此案例中效果是一样的。使用 <code>sticky</code> 就不需要设置 <code>section</code> 的下移，不过需要设置 <code>top</code> 属性：</p><pre><code class="hljs stylus">.navbar-main    <span class="hljs-attribute">position</span>: sticky !important    <span class="hljs-attribute">position</span>: -webkit-sticky !important    <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span></code></pre><h3 id="「瘦身」-「毛玻璃」，让导航栏灵巧一些">「瘦身」+「毛玻璃」，让导航栏灵巧一些</h3><p>接下来我想让导航栏看起来更轻巧一些，于是缩窄了导航栏的高度并加入了所谓「毛玻璃」效果。</p><h4 id="「瘦身」">「瘦身」</h4><p>通过修改 <code>navbar-item</code> 的内外边距来缩窄高度：</p><pre><code class="hljs stylus">.navbar-item    <span class="hljs-attribute">margin</span>: <span class="hljs-number">4px</span> !important    <span class="hljs-attribute">padding</span>: <span class="hljs-number">8.5px</span> !important</code></pre><p>同时 Icarus 原版对于移动端的处理是将 logo 放在一个自适应的 <code>div</code> 里，当屏幕宽度小于 1088 px 的时候，导航栏会分成上下两行。</p><p>但这对于一个一直固定在顶端的导航栏来说太大了，所以这里我做了个修改，将自适应去掉，把 logo 也放在 <code>navbar-menu</code> 里：</p><pre><div class="caption"><span>layout/common/navbar.jsx</span></div><code class="hljs diff"><span class="hljs-deletion">- &lt;div class=&quot;navbar-brand justify-content-center&quot;&gt;</span><span class="hljs-deletion">-&lt;a class=&quot;navbar-item navbar-logo&quot; href=&#123;siteUrl&#125;&gt;&#123;navbarLogo&#125;&lt;/a&gt;</span><span class="hljs-deletion">- &lt;/div&gt;</span> &lt;div class=&quot;navbar-menu&quot;&gt;<span class="hljs-addition">+&lt;a class=&quot;navbar-item navbar-logo&quot; href=&#123;siteUrl&#125;&gt;&#123;navbarLogo&#125;&lt;/a&gt;</span>... &lt;/div&gt;</code></pre><p>效果图：</p><div style="text-align: center"><picture>    <source srcset="https://static.anzifan.com/uPic/1_navbar_dark.png" media="(prefers-color-scheme: dark)">    <source srcset="https://static.anzifan.com/uPic/1_navbar.png" media="(prefers-color-scheme: light)">    <img class="adapt" src="https://static.anzifan.com/uPic/1_navbar.png" alt="改动后的导航栏更窄更清爽了（右）"></picture></div><p>当然，还有些更好的方案，比如制作下拉菜单栏，以解决导航栏里的标签页太多超出屏幕宽度的问题，可以见这个旧版本的 <a href="https://github.com/ppoffice/hexo-theme-icarus/pull/616">PR</a>。有空的时候我会改进导航栏，如果真的有人看的话。</p><h4 id="「毛玻璃」">「毛玻璃」</h4><p>所谓「毛玻璃」，更专业一点的说法叫「Backdrop Filter effect」，即背景过滤效果。所以核心就是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/backdrop-filter"><code>backdrop-filter</code> 样式</a>。我这里依旧模仿的 Apple <a href="https://www.apple.com/newsroom/">Newsroom</a>，将 <code>navbar</code> 背景色变透明并增加饱和度和模糊：</p><pre><code class="hljs stylus">.navbar    -webkit-backdrop-<span class="hljs-attribute">filter</span>: saturate(<span class="hljs-number">180%</span>) blur(<span class="hljs-number">20px</span>)    backdrop-<span class="hljs-attribute">filter</span>: saturate(<span class="hljs-number">180%</span>) blur(<span class="hljs-number">20px</span>)    <span class="hljs-attribute">background-color</span>: rgba(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.7</span>) !important    <span class="hljs-comment">//黑暗模式下颜色为 rgba(29,29,31,0.7)</span></code></pre><p>再将 <code>navbar-menu</code> 背景设为透明，这样小尺寸屏幕下也能正常显示：</p><pre><code class="hljs stylus"><span class="hljs-selector-class">.navbar-main</span> .navbar-menu    <span class="hljs-attribute">background-color</span>: transparent</code></pre><p>效果图：</p><div style="text-align: center"><picture>    <source srcset="https://static.anzifan.com/uPic/1_navbar_dark.gif" media="(prefers-color-scheme: dark)">    <source srcset="https://static.anzifan.com/uPic/1_navbar_light.gif" media="(prefers-color-scheme: light)">    <img class="adapt" src="https://static.anzifan.com/uPic/1_navbar_light.gif" alt=""></picture></div><h3 id="最后，修复锚元素定位">最后，修复锚元素定位</h3><p>我们固定了导航栏，紧接着问题就来了。你会发现之前的页内锚元素跳转全都错位了（比如目录、脚注），更准确的来说是正好被现在的导航栏所遮挡，所以我们要来修复这个 bug。</p><h4 id="脚注修复">脚注修复</h4><p>先来修复简单的，修复脚注我们只需要用到 CSS（因为新版目录是用 JavaScript 来控制 <code>href</code> 属性值的，这个方法就不行了)，这里我们用到一个小技巧，即用 <code>:target</code> 去定位目标元素，并用 <code>::before</code> 在前面加一个空的行内元素，然后通过 <code>padding-top</code> 和 <code>margin-top</code> 配合来控制位置这样就修复了正文到脚注的跳转错位：</p><pre><code class="hljs stylus">:target::before     <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>    <span class="hljs-attribute">display</span>: inline-block    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">73px</span>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">73px</span></code></pre><p>稍微解释一下，这里就是先用 <code>padding-top</code> 将这个空的 <code>inline-block</code> 移动到距离其容器上方 N px 的位置，然后通过 <code>margin-top</code> 将这个容器整体上移 N px 的位置，这样我们就可以通过调整 N 的值来控制元素的位置。</p><p>同理，我们还需要修复下脚注到正文的跳转：</p><pre><code class="hljs stylus"><span class="hljs-selector-class">.footnote-item</span>::before     <span class="hljs-attribute">display</span>: block    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">55px</span>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">55px</span>    <span class="hljs-attribute">margin-bottom</span>: -<span class="hljs-number">25px</span></code></pre><p>这里有一些细微的差别，因为脚注是一个列表，列表的元素应该按一整条一整条来看，所以我们把 <code>display</code> 改为 <code>block</code>，再按照之前的方法适当调整一下距离，最后我们还需要通过 <code>margin-bottom</code> 来对齐文本和序号。</p><h4 id="目录修复">目录修复</h4><p>如果你不需要一个「随着滚动到不同位置，动态折叠展开」的目录，你可以使用<a href="https://github.com/MannyCooper/hexo-theme-candy/blob/d6524f98b0faeb866172b4a9a948ee9dc4c81081/source/js/toc.js">这个</a>旧版本的 <code>toc.js</code>，并且采用上面修复脚注的方式来修复错位，这里我就不赘述了。</p><p>如果你需要这样一个「智能」的目录，请采用<a href="https://github.com/MannyCooper/hexo-theme-candy/blob/465b3a7342d99981972075c8d7bd0228be699a69/source/js/toc.js">最新版本</a>的 <code>toc.js</code> 并把它放在 <code>source/js</code> 里，这里我只说下对于错位的修复。</p><p>首先在 <code>source/js/toc.js</code> 中创建一个 <code>scrollTo</code> 方法来代替不支持偏移量的 <code>scrollIntoView</code> 方法：</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scrollTo</span>(<span class="hljs-params">id</span>) </span>&#123;  <span class="hljs-keyword">var</span> element = <span class="hljs-built_in">document</span>.getElementById(id);  <span class="hljs-keyword">var</span> headerOffset = -<span class="hljs-number">20</span>; <span class="hljs-comment">// 偏移量</span>  <span class="hljs-keyword">var</span> elementPosition = element.offsetTop;  <span class="hljs-keyword">var</span> offsetPosition = elementPosition - headerOffset;  <span class="hljs-built_in">document</span>.documentElement.scrollTop = offsetPosition;  <span class="hljs-built_in">document</span>.body.scrollTop = offsetPosition; <span class="hljs-comment">// 适配 Safari</span>&#125;</code></pre><p>没有什么可说的，非常好理解，然后在下面替换即可：</p><pre><code class="hljs diff">if (typeof $heading.scrollTo <span class="hljs-comment">=== &#x27;function&#x27;) &#123;</span><span class="hljs-deletion">- $heading.scrollIntoView(&#123; behavior: &#x27;smooth&#x27; &#125;);</span><span class="hljs-addition">+ scrollTo($heading.id);</span>&#125;</code></pre><p>就是这么简单，我们完成了所有错位修复。</p><h2 id="写在最后的、其他的一些玩意儿">写在最后的、其他的一些玩意儿</h2><p>感谢你看到这里，零基础的我可能比较啰嗦，这当然不是我在视觉和交互上做出的全部修改，尽量挑了些对我来说比较有代表性的「坑」，大佬们见笑了。一些细枝末节的修改，网络上可能已经有无数篇相同的文章教你如何去操作了，我就不费口舌了。当然如果你有任何疑问、评价或想教我做事儿，也请不要吝啬，<strong>请在文末的评论区给我留言</strong>，我会第一时间回复。</p><p>这是 Candy 主题修改系列的第一篇，应该也是最零碎的一篇，我非常迫不及待地想分享关于黑暗模式的实现，但是先忍住，下一篇将会是关于 Twikoo 的，一个非常崭新的评论系统，美观、安全、易用、免登录、免费等等，虽然它还有很长的路要走，但目前配得上这些美好的词汇。希望我能在官方作者写出详细教程之前发布（逃）。</p><p>本文完。</p><a class="tag is-medium" href="mailto:541297173@qq.com?subject=「创造 CANDY 主题，只为更好的交互」一文的封面图授权申请" target="_blank"><span class="icon" style="word-wrap: break-word;"><i class="fas fa-palette"></i></span>原创封面图，使用需<b>授权</b>，请勿盗用 </a><h2 id="脚注">脚注</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://github.com/ppoffice/hexo-theme-icarus">Icarus 主题的 GitHub 仓库主页</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><strong><a href="https://api.jquery.com/wrap/">.wrap( wrappingElement )</a></strong>: <em>Wrap an HTML structure around each element in the set of matched elements.</em> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Stylus 是富于表现力、健壮、功能丰富的 CSS 预处理器，详见<a href="https://stylus-lang.com">官网</a>。 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://efe.baidu.com/blog/revisiting-css-preprocessors/#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F">再谈 CSS 预处理器｜变量作用域 - Justineo</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://blog.csdn.net/u011456552/article/details/53464157">图片transform其父级的border-radius失效 - 沈志勇说</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">基于 ICARUS 主题重新思考并设计个人博客。</summary>
    
    
    
    <category term="技术" scheme="https://anzifan.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://anzifan.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Hexo" scheme="https://anzifan.com/tags/Hexo/"/>
    
    <category term="博客主题" scheme="https://anzifan.com/tags/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"/>
    
    <category term="交互设计" scheme="https://anzifan.com/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
